
// AUTO GENERATED by vnxcppcodegen

#include <mmx/contract/Binary.hxx>
#include <mmx/contract/Binary_calc_cost.hxx>
#include <mmx/contract/Binary_calc_cost_return.hxx>
#include <mmx/contract/Binary_calc_hash.hxx>
#include <mmx/contract/Binary_calc_hash_return.hxx>
#include <mmx/contract/Binary_find_field.hxx>
#include <mmx/contract/Binary_find_field_return.hxx>
#include <mmx/contract/Binary_find_method.hxx>
#include <mmx/contract/Binary_find_method_return.hxx>
#include <mmx/contract/Binary_is_valid.hxx>
#include <mmx/contract/Binary_is_valid_return.hxx>
#include <mmx/contract/Data.hxx>
#include <mmx/contract/Data_calc_cost.hxx>
#include <mmx/contract/Data_calc_cost_return.hxx>
#include <mmx/contract/Data_calc_hash.hxx>
#include <mmx/contract/Data_calc_hash_return.hxx>
#include <mmx/contract/Data_num_bytes.hxx>
#include <mmx/contract/Data_num_bytes_return.hxx>
#include <mmx/contract/Executable.hxx>
#include <mmx/contract/Executable_calc_cost.hxx>
#include <mmx/contract/Executable_calc_cost_return.hxx>
#include <mmx/contract/Executable_calc_hash.hxx>
#include <mmx/contract/Executable_calc_hash_return.hxx>
#include <mmx/contract/Executable_is_valid.hxx>
#include <mmx/contract/Executable_is_valid_return.hxx>
#include <mmx/contract/Executable_validate.hxx>
#include <mmx/contract/Executable_validate_return.hxx>
#include <mmx/contract/Identity.hxx>
#include <mmx/contract/MultiSig.hxx>
#include <mmx/contract/MultiSig_calc_cost.hxx>
#include <mmx/contract/MultiSig_calc_cost_return.hxx>
#include <mmx/contract/MultiSig_calc_hash.hxx>
#include <mmx/contract/MultiSig_calc_hash_return.hxx>
#include <mmx/contract/MultiSig_is_valid.hxx>
#include <mmx/contract/MultiSig_is_valid_return.hxx>
#include <mmx/contract/MultiSig_validate.hxx>
#include <mmx/contract/MultiSig_validate_return.hxx>
#include <mmx/contract/NFT.hxx>
#include <mmx/contract/NFT_calc_cost.hxx>
#include <mmx/contract/NFT_calc_cost_return.hxx>
#include <mmx/contract/NFT_calc_hash.hxx>
#include <mmx/contract/NFT_calc_hash_return.hxx>
#include <mmx/contract/NFT_is_valid.hxx>
#include <mmx/contract/NFT_is_valid_return.hxx>
#include <mmx/contract/NFT_num_bytes.hxx>
#include <mmx/contract/NFT_num_bytes_return.hxx>
#include <mmx/contract/PubKey.hxx>
#include <mmx/contract/PubKey_calc_cost.hxx>
#include <mmx/contract/PubKey_calc_cost_return.hxx>
#include <mmx/contract/PubKey_calc_hash.hxx>
#include <mmx/contract/PubKey_calc_hash_return.hxx>
#include <mmx/contract/PubKey_get_owner.hxx>
#include <mmx/contract/PubKey_get_owner_return.hxx>
#include <mmx/contract/PubKey_is_valid.hxx>
#include <mmx/contract/PubKey_is_valid_return.hxx>
#include <mmx/contract/PubKey_validate.hxx>
#include <mmx/contract/PubKey_validate_return.hxx>
#include <mmx/contract/TokenBase.hxx>
#include <mmx/contract/TokenBase_calc_cost.hxx>
#include <mmx/contract/TokenBase_calc_cost_return.hxx>
#include <mmx/contract/TokenBase_calc_hash.hxx>
#include <mmx/contract/TokenBase_calc_hash_return.hxx>
#include <mmx/contract/TokenBase_is_valid.hxx>
#include <mmx/contract/TokenBase_is_valid_return.hxx>
#include <mmx/contract/VirtualPlot.hxx>
#include <mmx/contract/VirtualPlot_calc_hash.hxx>
#include <mmx/contract/VirtualPlot_calc_hash_return.hxx>
#include <mmx/contract/VirtualPlot_is_valid.hxx>
#include <mmx/contract/VirtualPlot_is_valid_return.hxx>
#include <mmx/contract/WebData.hxx>
#include <mmx/contract/WebData_calc_cost.hxx>
#include <mmx/contract/WebData_calc_cost_return.hxx>
#include <mmx/contract/WebData_calc_hash.hxx>
#include <mmx/contract/WebData_calc_hash_return.hxx>
#include <mmx/contract/WebData_is_valid.hxx>
#include <mmx/contract/WebData_is_valid_return.hxx>
#include <mmx/contract/WebData_num_bytes.hxx>
#include <mmx/contract/WebData_num_bytes_return.hxx>
#include <mmx/contract/method_t.hxx>

#include <mmx/contract/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::mmx::contract::Binary>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary;
}

void type<::mmx::contract::Binary>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary());
}

void type<::mmx::contract::Binary>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_calc_cost;
}

void type<::mmx::contract::Binary_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_calc_cost());
}

void type<::mmx::contract::Binary_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_calc_cost_return;
}

void type<::mmx::contract::Binary_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_calc_cost_return());
}

void type<::mmx::contract::Binary_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_calc_hash;
}

void type<::mmx::contract::Binary_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_calc_hash());
}

void type<::mmx::contract::Binary_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_calc_hash_return;
}

void type<::mmx::contract::Binary_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_calc_hash_return());
}

void type<::mmx::contract::Binary_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_find_field>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_find_field;
}

void type<::mmx::contract::Binary_find_field>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_find_field());
}

void type<::mmx::contract::Binary_find_field>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_field& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_find_field_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_find_field_return;
}

void type<::mmx::contract::Binary_find_field_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_find_field_return());
}

void type<::mmx::contract::Binary_find_field_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_field_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_find_method>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_find_method;
}

void type<::mmx::contract::Binary_find_method>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_find_method());
}

void type<::mmx::contract::Binary_find_method>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_method& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_find_method_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_find_method_return;
}

void type<::mmx::contract::Binary_find_method_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_find_method_return());
}

void type<::mmx::contract::Binary_find_method_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_method_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_is_valid;
}

void type<::mmx::contract::Binary_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_is_valid());
}

void type<::mmx::contract::Binary_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Binary_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Binary_is_valid_return;
}

void type<::mmx::contract::Binary_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Binary_is_valid_return());
}

void type<::mmx::contract::Binary_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data;
}

void type<::mmx::contract::Data>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data());
}

void type<::mmx::contract::Data>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_calc_cost;
}

void type<::mmx::contract::Data_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_calc_cost());
}

void type<::mmx::contract::Data_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_calc_cost_return;
}

void type<::mmx::contract::Data_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_calc_cost_return());
}

void type<::mmx::contract::Data_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_calc_hash;
}

void type<::mmx::contract::Data_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_calc_hash());
}

void type<::mmx::contract::Data_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_calc_hash_return;
}

void type<::mmx::contract::Data_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_calc_hash_return());
}

void type<::mmx::contract::Data_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_num_bytes>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_num_bytes;
}

void type<::mmx::contract::Data_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_num_bytes());
}

void type<::mmx::contract::Data_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_num_bytes& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Data_num_bytes_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Data_num_bytes_return;
}

void type<::mmx::contract::Data_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Data_num_bytes_return());
}

void type<::mmx::contract::Data_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_num_bytes_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable;
}

void type<::mmx::contract::Executable>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable());
}

void type<::mmx::contract::Executable>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_calc_cost;
}

void type<::mmx::contract::Executable_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_calc_cost());
}

void type<::mmx::contract::Executable_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_calc_cost_return;
}

void type<::mmx::contract::Executable_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_calc_cost_return());
}

void type<::mmx::contract::Executable_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_calc_hash;
}

void type<::mmx::contract::Executable_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_calc_hash());
}

void type<::mmx::contract::Executable_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_calc_hash_return;
}

void type<::mmx::contract::Executable_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_calc_hash_return());
}

void type<::mmx::contract::Executable_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_is_valid;
}

void type<::mmx::contract::Executable_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_is_valid());
}

void type<::mmx::contract::Executable_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_is_valid_return;
}

void type<::mmx::contract::Executable_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_is_valid_return());
}

void type<::mmx::contract::Executable_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_validate>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_validate;
}

void type<::mmx::contract::Executable_validate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_validate());
}

void type<::mmx::contract::Executable_validate>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_validate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Executable_validate_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Executable_validate_return;
}

void type<::mmx::contract::Executable_validate_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Executable_validate_return());
}

void type<::mmx::contract::Executable_validate_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_validate_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::Identity>::get_type_code() {
	return mmx::contract::vnx_native_type_code_Identity;
}

void type<::mmx::contract::Identity>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::Identity());
}

void type<::mmx::contract::Identity>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Identity& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig;
}

void type<::mmx::contract::MultiSig>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig());
}

void type<::mmx::contract::MultiSig>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_calc_cost;
}

void type<::mmx::contract::MultiSig_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_calc_cost());
}

void type<::mmx::contract::MultiSig_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_calc_cost_return;
}

void type<::mmx::contract::MultiSig_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_calc_cost_return());
}

void type<::mmx::contract::MultiSig_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_calc_hash;
}

void type<::mmx::contract::MultiSig_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_calc_hash());
}

void type<::mmx::contract::MultiSig_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_calc_hash_return;
}

void type<::mmx::contract::MultiSig_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_calc_hash_return());
}

void type<::mmx::contract::MultiSig_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_is_valid;
}

void type<::mmx::contract::MultiSig_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_is_valid());
}

void type<::mmx::contract::MultiSig_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_is_valid_return;
}

void type<::mmx::contract::MultiSig_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_is_valid_return());
}

void type<::mmx::contract::MultiSig_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_validate>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_validate;
}

void type<::mmx::contract::MultiSig_validate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_validate());
}

void type<::mmx::contract::MultiSig_validate>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_validate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::MultiSig_validate_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_MultiSig_validate_return;
}

void type<::mmx::contract::MultiSig_validate_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::MultiSig_validate_return());
}

void type<::mmx::contract::MultiSig_validate_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_validate_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT;
}

void type<::mmx::contract::NFT>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT());
}

void type<::mmx::contract::NFT>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_calc_cost;
}

void type<::mmx::contract::NFT_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_calc_cost());
}

void type<::mmx::contract::NFT_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_calc_cost_return;
}

void type<::mmx::contract::NFT_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_calc_cost_return());
}

void type<::mmx::contract::NFT_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_calc_hash;
}

void type<::mmx::contract::NFT_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_calc_hash());
}

void type<::mmx::contract::NFT_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_calc_hash_return;
}

void type<::mmx::contract::NFT_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_calc_hash_return());
}

void type<::mmx::contract::NFT_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_is_valid;
}

void type<::mmx::contract::NFT_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_is_valid());
}

void type<::mmx::contract::NFT_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_is_valid_return;
}

void type<::mmx::contract::NFT_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_is_valid_return());
}

void type<::mmx::contract::NFT_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_num_bytes>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_num_bytes;
}

void type<::mmx::contract::NFT_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_num_bytes());
}

void type<::mmx::contract::NFT_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_num_bytes& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::NFT_num_bytes_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_NFT_num_bytes_return;
}

void type<::mmx::contract::NFT_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::NFT_num_bytes_return());
}

void type<::mmx::contract::NFT_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::NFT_num_bytes_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey;
}

void type<::mmx::contract::PubKey>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey());
}

void type<::mmx::contract::PubKey>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_calc_cost;
}

void type<::mmx::contract::PubKey_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_calc_cost());
}

void type<::mmx::contract::PubKey_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_calc_cost_return;
}

void type<::mmx::contract::PubKey_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_calc_cost_return());
}

void type<::mmx::contract::PubKey_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_calc_hash;
}

void type<::mmx::contract::PubKey_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_calc_hash());
}

void type<::mmx::contract::PubKey_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_calc_hash_return;
}

void type<::mmx::contract::PubKey_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_calc_hash_return());
}

void type<::mmx::contract::PubKey_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_get_owner>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_get_owner;
}

void type<::mmx::contract::PubKey_get_owner>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_get_owner());
}

void type<::mmx::contract::PubKey_get_owner>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_get_owner& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_get_owner_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_get_owner_return;
}

void type<::mmx::contract::PubKey_get_owner_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_get_owner_return());
}

void type<::mmx::contract::PubKey_get_owner_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_get_owner_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_is_valid;
}

void type<::mmx::contract::PubKey_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_is_valid());
}

void type<::mmx::contract::PubKey_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_is_valid_return;
}

void type<::mmx::contract::PubKey_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_is_valid_return());
}

void type<::mmx::contract::PubKey_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_validate>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_validate;
}

void type<::mmx::contract::PubKey_validate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_validate());
}

void type<::mmx::contract::PubKey_validate>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_validate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::PubKey_validate_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_PubKey_validate_return;
}

void type<::mmx::contract::PubKey_validate_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::PubKey_validate_return());
}

void type<::mmx::contract::PubKey_validate_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_validate_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase;
}

void type<::mmx::contract::TokenBase>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase());
}

void type<::mmx::contract::TokenBase>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_calc_cost;
}

void type<::mmx::contract::TokenBase_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_calc_cost());
}

void type<::mmx::contract::TokenBase_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_calc_cost_return;
}

void type<::mmx::contract::TokenBase_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_calc_cost_return());
}

void type<::mmx::contract::TokenBase_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_calc_hash;
}

void type<::mmx::contract::TokenBase_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_calc_hash());
}

void type<::mmx::contract::TokenBase_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_calc_hash_return;
}

void type<::mmx::contract::TokenBase_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_calc_hash_return());
}

void type<::mmx::contract::TokenBase_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_is_valid;
}

void type<::mmx::contract::TokenBase_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_is_valid());
}

void type<::mmx::contract::TokenBase_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::TokenBase_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_TokenBase_is_valid_return;
}

void type<::mmx::contract::TokenBase_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::TokenBase_is_valid_return());
}

void type<::mmx::contract::TokenBase_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::VirtualPlot>::get_type_code() {
	return mmx::contract::vnx_native_type_code_VirtualPlot;
}

void type<::mmx::contract::VirtualPlot>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::VirtualPlot());
}

void type<::mmx::contract::VirtualPlot>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::VirtualPlot_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_VirtualPlot_calc_hash;
}

void type<::mmx::contract::VirtualPlot_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::VirtualPlot_calc_hash());
}

void type<::mmx::contract::VirtualPlot_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::VirtualPlot_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_VirtualPlot_calc_hash_return;
}

void type<::mmx::contract::VirtualPlot_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::VirtualPlot_calc_hash_return());
}

void type<::mmx::contract::VirtualPlot_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::VirtualPlot_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_VirtualPlot_is_valid;
}

void type<::mmx::contract::VirtualPlot_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::VirtualPlot_is_valid());
}

void type<::mmx::contract::VirtualPlot_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::VirtualPlot_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_VirtualPlot_is_valid_return;
}

void type<::mmx::contract::VirtualPlot_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::VirtualPlot_is_valid_return());
}

void type<::mmx::contract::VirtualPlot_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData;
}

void type<::mmx::contract::WebData>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData());
}

void type<::mmx::contract::WebData>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_calc_cost>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_calc_cost;
}

void type<::mmx::contract::WebData_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_calc_cost());
}

void type<::mmx::contract::WebData_calc_cost>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_cost& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_calc_cost_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_calc_cost_return;
}

void type<::mmx::contract::WebData_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_calc_cost_return());
}

void type<::mmx::contract::WebData_calc_cost_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_cost_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_calc_hash>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_calc_hash;
}

void type<::mmx::contract::WebData_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_calc_hash());
}

void type<::mmx::contract::WebData_calc_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_calc_hash_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_calc_hash_return;
}

void type<::mmx::contract::WebData_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_calc_hash_return());
}

void type<::mmx::contract::WebData_calc_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_is_valid>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_is_valid;
}

void type<::mmx::contract::WebData_is_valid>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_is_valid());
}

void type<::mmx::contract::WebData_is_valid>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_is_valid& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_is_valid_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_is_valid_return;
}

void type<::mmx::contract::WebData_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_is_valid_return());
}

void type<::mmx::contract::WebData_is_valid_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_is_valid_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_num_bytes>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_num_bytes;
}

void type<::mmx::contract::WebData_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_num_bytes());
}

void type<::mmx::contract::WebData_num_bytes>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_num_bytes& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::WebData_num_bytes_return>::get_type_code() {
	return mmx::contract::vnx_native_type_code_WebData_num_bytes_return;
}

void type<::mmx::contract::WebData_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::WebData_num_bytes_return());
}

void type<::mmx::contract::WebData_num_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_num_bytes_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::mmx::contract::method_t>::get_type_code() {
	return mmx::contract::vnx_native_type_code_method_t;
}

void type<::mmx::contract::method_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::contract::method_t());
}

void type<::mmx::contract::method_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::method_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace mmx {
namespace contract {


static void register_all_types() {
	vnx::register_type_code(::mmx::contract::Binary::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_find_field::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_find_field_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_find_method::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_find_method_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Binary_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_num_bytes::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Data_num_bytes_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_validate::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Executable_validate_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::Identity::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_validate::static_create_type_code());
	vnx::register_type_code(::mmx::contract::MultiSig_validate_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_num_bytes::static_create_type_code());
	vnx::register_type_code(::mmx::contract::NFT_num_bytes_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_get_owner::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_get_owner_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_validate::static_create_type_code());
	vnx::register_type_code(::mmx::contract::PubKey_validate_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::TokenBase_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::VirtualPlot::static_create_type_code());
	vnx::register_type_code(::mmx::contract::VirtualPlot_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::VirtualPlot_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::VirtualPlot_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::VirtualPlot_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_calc_cost::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_calc_cost_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_calc_hash::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_calc_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_is_valid::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_is_valid_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_num_bytes::static_create_type_code());
	vnx::register_type_code(::mmx::contract::WebData_num_bytes_return::static_create_type_code());
	vnx::register_type_code(::mmx::contract::method_t::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_Binary = vnx::get_type_code(vnx::Hash64(0xbbeba47fc8b740e5ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_calc_cost = vnx::get_type_code(vnx::Hash64(0x4c3fe58fddf47afull));
const vnx::TypeCode* const vnx_native_type_code_Binary_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xc7b18ac0e1c3e24ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_calc_hash = vnx::get_type_code(vnx::Hash64(0xd4d1353e984d3350ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_calc_hash_return = vnx::get_type_code(vnx::Hash64(0x772d45a088c35358ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_find_field = vnx::get_type_code(vnx::Hash64(0xd452e90b79266ffdull));
const vnx::TypeCode* const vnx_native_type_code_Binary_find_field_return = vnx::get_type_code(vnx::Hash64(0xb4983a712d6359e3ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_find_method = vnx::get_type_code(vnx::Hash64(0x909ccffe5a222b83ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_find_method_return = vnx::get_type_code(vnx::Hash64(0xc1c7b09dd1d78f46ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_is_valid = vnx::get_type_code(vnx::Hash64(0x5dc8876a8b68a708ull));
const vnx::TypeCode* const vnx_native_type_code_Binary_is_valid_return = vnx::get_type_code(vnx::Hash64(0xf524a791bf75117cull));
const vnx::TypeCode* const vnx_native_type_code_Data = vnx::get_type_code(vnx::Hash64(0xadfeee3822244f50ull));
const vnx::TypeCode* const vnx_native_type_code_Data_calc_cost = vnx::get_type_code(vnx::Hash64(0xd330303ae8af8a8bull));
const vnx::TypeCode* const vnx_native_type_code_Data_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xffa8c93868ea4352ull));
const vnx::TypeCode* const vnx_native_type_code_Data_calc_hash = vnx::get_type_code(vnx::Hash64(0x322fb5c8d3dfe74ull));
const vnx::TypeCode* const vnx_native_type_code_Data_calc_hash_return = vnx::get_type_code(vnx::Hash64(0x84fe9434ee352e2eull));
const vnx::TypeCode* const vnx_native_type_code_Data_num_bytes = vnx::get_type_code(vnx::Hash64(0x2494b20a50d3ff9cull));
const vnx::TypeCode* const vnx_native_type_code_Data_num_bytes_return = vnx::get_type_code(vnx::Hash64(0x718397aef0c26541ull));
const vnx::TypeCode* const vnx_native_type_code_Executable = vnx::get_type_code(vnx::Hash64(0xfa6a3ac9103ebb12ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_calc_cost = vnx::get_type_code(vnx::Hash64(0x5637ec4f54b3d1baull));
const vnx::TypeCode* const vnx_native_type_code_Executable_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xe290488c6b3548a6ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_calc_hash = vnx::get_type_code(vnx::Hash64(0x862527293121a545ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_calc_hash_return = vnx::get_type_code(vnx::Hash64(0x99c61580edea25daull));
const vnx::TypeCode* const vnx_native_type_code_Executable_is_valid = vnx::get_type_code(vnx::Hash64(0xb8eff28f88909a73ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_is_valid_return = vnx::get_type_code(vnx::Hash64(0x92797cb1785e1d24ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_validate = vnx::get_type_code(vnx::Hash64(0x9950617982fe2536ull));
const vnx::TypeCode* const vnx_native_type_code_Executable_validate_return = vnx::get_type_code(vnx::Hash64(0x8f5cc060b4a18cdfull));
const vnx::TypeCode* const vnx_native_type_code_Identity = vnx::get_type_code(vnx::Hash64(0x69710dd250a33c5eull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig = vnx::get_type_code(vnx::Hash64(0x7d674c5f7297dedull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_cost = vnx::get_type_code(vnx::Hash64(0x1f65ef156660d39full));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_cost_return = vnx::get_type_code(vnx::Hash64(0x27d3b356beac0b61ull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_hash = vnx::get_type_code(vnx::Hash64(0xcf77247303f2a760ull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_hash_return = vnx::get_type_code(vnx::Hash64(0x5c85ee5a3873661dull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_is_valid = vnx::get_type_code(vnx::Hash64(0x613ac937350f5cd7ull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_is_valid_return = vnx::get_type_code(vnx::Hash64(0x2b104aee1e626c8cull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_validate = vnx::get_type_code(vnx::Hash64(0x40855ac13f61e392ull));
const vnx::TypeCode* const vnx_native_type_code_MultiSig_validate_return = vnx::get_type_code(vnx::Hash64(0x3635f63fd29dfd77ull));
const vnx::TypeCode* const vnx_native_type_code_NFT = vnx::get_type_code(vnx::Hash64(0x7cb24b9888a47906ull));
const vnx::TypeCode* const vnx_native_type_code_NFT_calc_cost = vnx::get_type_code(vnx::Hash64(0x462462234574232ull));
const vnx::TypeCode* const vnx_native_type_code_NFT_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xcbb78b8c7318ffecull));
const vnx::TypeCode* const vnx_native_type_code_NFT_calc_hash = vnx::get_type_code(vnx::Hash64(0xd4708d4451c536cdull));
const vnx::TypeCode* const vnx_native_type_code_NFT_calc_hash_return = vnx::get_type_code(vnx::Hash64(0xb0e1d680f5c79290ull));
const vnx::TypeCode* const vnx_native_type_code_NFT_is_valid = vnx::get_type_code(vnx::Hash64(0xfc70fda3036d3a08ull));
const vnx::TypeCode* const vnx_native_type_code_NFT_is_valid_return = vnx::get_type_code(vnx::Hash64(0x744c9a1ab5d94c5bull));
const vnx::TypeCode* const vnx_native_type_code_NFT_num_bytes = vnx::get_type_code(vnx::Hash64(0xf3c6c4128c2b3725ull));
const vnx::TypeCode* const vnx_native_type_code_NFT_num_bytes_return = vnx::get_type_code(vnx::Hash64(0x459cd51aeb30d9ffull));
const vnx::TypeCode* const vnx_native_type_code_PubKey = vnx::get_type_code(vnx::Hash64(0x9b3cd508d7f41423ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_cost = vnx::get_type_code(vnx::Hash64(0x502d1edce44719b3ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xc2f589dac0e8bcb0ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_hash = vnx::get_type_code(vnx::Hash64(0x803fd5ba81d56d4cull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_hash_return = vnx::get_type_code(vnx::Hash64(0xb9a3d4d64637d1ccull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_get_owner = vnx::get_type_code(vnx::Hash64(0x6df2dce9e7433921ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_get_owner_return = vnx::get_type_code(vnx::Hash64(0xc13e7906259b5238ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_is_valid = vnx::get_type_code(vnx::Hash64(0xe97fdd91c060e967ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_is_valid_return = vnx::get_type_code(vnx::Hash64(0xce58570ddfcea36dull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_validate = vnx::get_type_code(vnx::Hash64(0xc8c04e67ca0e5622ull));
const vnx::TypeCode* const vnx_native_type_code_PubKey_validate_return = vnx::get_type_code(vnx::Hash64(0xd37debdc13313296ull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase = vnx::get_type_code(vnx::Hash64(0x5aeed4c96d232b5eull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_cost = vnx::get_type_code(vnx::Hash64(0xc758d95e2799f160ull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_cost_return = vnx::get_type_code(vnx::Hash64(0xc3130ec5850d7bb0ull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_hash = vnx::get_type_code(vnx::Hash64(0x174a1238420b859full));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_hash_return = vnx::get_type_code(vnx::Hash64(0xb84553c903d216ccull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_is_valid = vnx::get_type_code(vnx::Hash64(0x771fd1948e99a4b4ull));
const vnx::TypeCode* const vnx_native_type_code_TokenBase_is_valid_return = vnx::get_type_code(vnx::Hash64(0xba07e7639507bde8ull));
const vnx::TypeCode* const vnx_native_type_code_VirtualPlot = vnx::get_type_code(vnx::Hash64(0xab02561c615511e8ull));
const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_hash = vnx::get_type_code(vnx::Hash64(0x2ec01712e3899bd7ull));
const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_hash_return = vnx::get_type_code(vnx::Hash64(0xd7d3a1e038583226ull));
const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_is_valid = vnx::get_type_code(vnx::Hash64(0xe97074988602acadull));
const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_is_valid_return = vnx::get_type_code(vnx::Hash64(0xd5a16e6bb7e26611ull));
const vnx::TypeCode* const vnx_native_type_code_WebData = vnx::get_type_code(vnx::Hash64(0xf7c226b211c088c4ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_calc_cost = vnx::get_type_code(vnx::Hash64(0x3bbbd77da38a1013ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_calc_cost_return = vnx::get_type_code(vnx::Hash64(0x83c6569262ee4aa5ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_calc_hash = vnx::get_type_code(vnx::Hash64(0xeba91c1bc61864ecull));
const vnx::TypeCode* const vnx_native_type_code_WebData_calc_hash_return = vnx::get_type_code(vnx::Hash64(0xf8900b9ee43127d9ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_is_valid = vnx::get_type_code(vnx::Hash64(0x7ae99137e8822105ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_is_valid_return = vnx::get_type_code(vnx::Hash64(0x1c9f4aaa82fff87aull));
const vnx::TypeCode* const vnx_native_type_code_WebData_num_bytes = vnx::get_type_code(vnx::Hash64(0xcc1f554d1bf66504ull));
const vnx::TypeCode* const vnx_native_type_code_WebData_num_bytes_return = vnx::get_type_code(vnx::Hash64(0xded0804fac66cb6ull));
const vnx::TypeCode* const vnx_native_type_code_method_t = vnx::get_type_code(vnx::Hash64(0x1f62512698176a39ull));

} // namespace mmx
} // namespace contract

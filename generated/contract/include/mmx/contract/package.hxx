
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_contract_PACKAGE_HXX_
#define INCLUDE_mmx_contract_PACKAGE_HXX_

#include <vnx/Type.h>

#include <mmx/package.hxx>
#include <vnx/package.hxx>

#ifdef MMX_CONTRACT_EXPORT_ENABLE
#include <mmx_contract_export.h>
#else
#ifndef MMX_CONTRACT_EXPORT
#define MMX_CONTRACT_EXPORT
#endif
#endif


namespace mmx {
namespace contract {

void register_all_types();


class Binary;
class Binary_calc_cost;
class Binary_calc_cost_return;
class Binary_calc_hash;
class Binary_calc_hash_return;
class Binary_find_field;
class Binary_find_field_return;
class Binary_find_method;
class Binary_find_method_return;
class Binary_is_valid;
class Binary_is_valid_return;
class Binary_num_bytes;
class Binary_num_bytes_return;
class Data;
class Data_calc_cost;
class Data_calc_cost_return;
class Data_calc_hash;
class Data_calc_hash_return;
class Data_num_bytes;
class Data_num_bytes_return;
class Executable;
class Executable_calc_cost;
class Executable_calc_cost_return;
class Executable_calc_hash;
class Executable_calc_hash_return;
class Executable_get_external;
class Executable_get_external_return;
class Executable_is_valid;
class Executable_is_valid_return;
class Executable_num_bytes;
class Executable_num_bytes_return;
class Executable_read_field;
class Executable_read_field_return;
class Identity;
class MultiSig;
class MultiSig_calc_cost;
class MultiSig_calc_cost_return;
class MultiSig_calc_hash;
class MultiSig_calc_hash_return;
class MultiSig_is_valid;
class MultiSig_is_valid_return;
class MultiSig_num_bytes;
class MultiSig_num_bytes_return;
class MultiSig_read_field;
class MultiSig_read_field_return;
class MultiSig_validate;
class MultiSig_validate_return;
class PubKey;
class PubKey_calc_cost;
class PubKey_calc_cost_return;
class PubKey_calc_hash;
class PubKey_calc_hash_return;
class PubKey_get_owner;
class PubKey_get_owner_return;
class PubKey_is_valid;
class PubKey_is_valid_return;
class PubKey_num_bytes;
class PubKey_num_bytes_return;
class PubKey_read_field;
class PubKey_read_field_return;
class PubKey_validate;
class PubKey_validate_return;
class TokenBase;
class TokenBase_calc_cost;
class TokenBase_calc_cost_return;
class TokenBase_calc_hash;
class TokenBase_calc_hash_return;
class TokenBase_is_valid;
class TokenBase_is_valid_return;
class TokenBase_num_bytes;
class TokenBase_num_bytes_return;
class VirtualPlot;
class VirtualPlot_calc_cost;
class VirtualPlot_calc_cost_return;
class VirtualPlot_calc_hash;
class VirtualPlot_calc_hash_return;
class VirtualPlot_is_valid;
class VirtualPlot_is_valid_return;
class VirtualPlot_num_bytes;
class VirtualPlot_num_bytes_return;
class VirtualPlot_read_field;
class VirtualPlot_read_field_return;
class WebData;
class WebData_calc_cost;
class WebData_calc_cost_return;
class WebData_calc_hash;
class WebData_calc_hash_return;
class WebData_is_valid;
class WebData_is_valid_return;
class WebData_num_bytes;
class WebData_num_bytes_return;
class WebData_read_field;
class WebData_read_field_return;
struct method_t;

MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_find_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_find_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_find_method; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_find_method_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Binary_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Data_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_get_external; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_get_external_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_read_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Executable_read_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Identity; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_read_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_read_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_validate; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MultiSig_validate_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_get_owner; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_get_owner_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_read_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_read_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_validate; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PubKey_validate_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TokenBase_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_read_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VirtualPlot_read_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_calc_cost; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_calc_cost_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_calc_hash; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_calc_hash_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_is_valid; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_is_valid_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_num_bytes; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_num_bytes_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_read_field; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WebData_read_field_return; ///< \private
MMX_CONTRACT_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_method_t; ///< \private

} // namespace mmx
} // namespace contract


namespace vnx {

void read(TypeInput& in, ::mmx::contract::Binary& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_find_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_find_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_find_method& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_find_method_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Binary_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Data_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_get_external& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_get_external_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Executable_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::Identity& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_validate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::MultiSig_validate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_get_owner& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_get_owner_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_validate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::PubKey_validate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::TokenBase_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::VirtualPlot_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::WebData_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::contract::method_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::contract::Binary& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_find_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_find_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_find_method& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_find_method_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Binary_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Data_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_get_external& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_get_external_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Executable_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::Identity& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_validate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::MultiSig_validate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_get_owner& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_get_owner_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_validate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::PubKey_validate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::TokenBase_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_calc_cost& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_calc_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_is_valid& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_is_valid_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_num_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_read_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::WebData_read_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::contract::method_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::contract::Binary& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_find_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_find_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_find_method& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_find_method_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::Binary_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::Data_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_get_external& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_get_external_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_read_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::Executable_read_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::Identity& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_read_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_read_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_validate& value); ///< \private
void read(std::istream& in, ::mmx::contract::MultiSig_validate_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_get_owner& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_get_owner_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_read_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_read_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_validate& value); ///< \private
void read(std::istream& in, ::mmx::contract::PubKey_validate_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::TokenBase_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_read_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::VirtualPlot_read_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_calc_cost& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_calc_cost_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_calc_hash& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_calc_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_is_valid& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_is_valid_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_num_bytes& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_num_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_read_field& value); ///< \private
void read(std::istream& in, ::mmx::contract::WebData_read_field_return& value); ///< \private
void read(std::istream& in, ::mmx::contract::method_t& value); ///< \private

void write(std::ostream& out, const ::mmx::contract::Binary& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_find_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_find_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_find_method& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_find_method_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Binary_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Data_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_get_external& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_get_external_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_read_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Executable_read_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::Identity& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_read_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_read_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_validate& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::MultiSig_validate_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_get_owner& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_get_owner_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_read_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_read_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_validate& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::PubKey_validate_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::TokenBase_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_read_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::VirtualPlot_read_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_calc_cost& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_calc_cost_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_calc_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_calc_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_is_valid& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_is_valid_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_num_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_num_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_read_field& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::WebData_read_field_return& value); ///< \private
void write(std::ostream& out, const ::mmx::contract::method_t& value); ///< \private

void accept(Visitor& visitor, const ::mmx::contract::Binary& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_find_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_find_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_find_method& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_find_method_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Binary_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Data_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_get_external& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_get_external_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_read_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Executable_read_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::Identity& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_read_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_read_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_validate& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::MultiSig_validate_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_get_owner& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_get_owner_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_read_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_read_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_validate& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::PubKey_validate_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::TokenBase_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_read_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_read_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_cost& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_cost_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_is_valid& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_is_valid_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_num_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_num_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_read_field& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::WebData_read_field_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::contract::method_t& value); ///< \private

/// \private
template<>
struct type<::mmx::contract::Binary> {
	void read(TypeInput& in, ::mmx::contract::Binary& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::Binary_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::Binary_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_find_field> {
	void read(TypeInput& in, ::mmx::contract::Binary_find_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_find_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_find_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_find_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_find_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_find_field_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_find_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_find_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_find_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_find_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_find_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_find_method> {
	void read(TypeInput& in, ::mmx::contract::Binary_find_method& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_find_method& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_find_method& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_find_method& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_find_method& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_method& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_find_method_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_find_method_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_find_method_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_find_method_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_find_method_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_find_method_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_find_method_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_is_valid> {
	void read(TypeInput& in, ::mmx::contract::Binary_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::Binary_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Binary_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::Binary_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Binary_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Binary_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Binary_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Binary_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Binary_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data> {
	void read(TypeInput& in, ::mmx::contract::Data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::Data_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::Data_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::Data_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::Data_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::Data_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Data_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::Data_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Data_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Data_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Data_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Data_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Data_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable> {
	void read(TypeInput& in, ::mmx::contract::Executable& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::Executable_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::Executable_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_get_external> {
	void read(TypeInput& in, ::mmx::contract::Executable_get_external& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_get_external& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_get_external& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_get_external& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_get_external& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_get_external& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_get_external_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_get_external_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_get_external_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_get_external_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_get_external_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_get_external_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_get_external_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_is_valid> {
	void read(TypeInput& in, ::mmx::contract::Executable_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::Executable_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_read_field> {
	void read(TypeInput& in, ::mmx::contract::Executable_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_read_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_read_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_read_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_read_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Executable_read_field_return> {
	void read(TypeInput& in, ::mmx::contract::Executable_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Executable_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Executable_read_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Executable_read_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Executable_read_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Executable_read_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::Identity> {
	void read(TypeInput& in, ::mmx::contract::Identity& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::Identity& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::Identity& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::Identity& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::Identity& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::Identity& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig> {
	void read(TypeInput& in, ::mmx::contract::MultiSig& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_is_valid> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_read_field> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_read_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_read_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_read_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_read_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_read_field_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_read_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_read_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_read_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_read_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_validate> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_validate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_validate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_validate& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_validate& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_validate& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_validate& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::MultiSig_validate_return> {
	void read(TypeInput& in, ::mmx::contract::MultiSig_validate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::MultiSig_validate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::MultiSig_validate_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::MultiSig_validate_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::MultiSig_validate_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::MultiSig_validate_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey> {
	void read(TypeInput& in, ::mmx::contract::PubKey& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::PubKey_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::PubKey_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_get_owner> {
	void read(TypeInput& in, ::mmx::contract::PubKey_get_owner& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_get_owner& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_get_owner& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_get_owner& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_get_owner& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_get_owner& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_get_owner_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_get_owner_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_get_owner_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_get_owner_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_get_owner_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_get_owner_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_get_owner_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_is_valid> {
	void read(TypeInput& in, ::mmx::contract::PubKey_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::PubKey_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_read_field> {
	void read(TypeInput& in, ::mmx::contract::PubKey_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_read_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_read_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_read_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_read_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_read_field_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_read_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_read_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_read_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_read_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_validate> {
	void read(TypeInput& in, ::mmx::contract::PubKey_validate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_validate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_validate& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_validate& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_validate& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_validate& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::PubKey_validate_return> {
	void read(TypeInput& in, ::mmx::contract::PubKey_validate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::PubKey_validate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::PubKey_validate_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::PubKey_validate_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::PubKey_validate_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::PubKey_validate_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase> {
	void read(TypeInput& in, ::mmx::contract::TokenBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_is_valid> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::TokenBase_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::TokenBase_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::TokenBase_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::TokenBase_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::TokenBase_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::TokenBase_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::TokenBase_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_is_valid> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_read_field> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_read_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_read_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_read_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_read_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::VirtualPlot_read_field_return> {
	void read(TypeInput& in, ::mmx::contract::VirtualPlot_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::VirtualPlot_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::VirtualPlot_read_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::VirtualPlot_read_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::VirtualPlot_read_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::VirtualPlot_read_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData> {
	void read(TypeInput& in, ::mmx::contract::WebData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_calc_cost> {
	void read(TypeInput& in, ::mmx::contract::WebData_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_calc_cost& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_calc_cost& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_calc_cost& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_cost& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_cost& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_calc_cost_return> {
	void read(TypeInput& in, ::mmx::contract::WebData_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_calc_cost_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_calc_cost_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_calc_cost_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_cost_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_cost_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_calc_hash> {
	void read(TypeInput& in, ::mmx::contract::WebData_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_calc_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_calc_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_calc_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_calc_hash_return> {
	void read(TypeInput& in, ::mmx::contract::WebData_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_calc_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_calc_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_calc_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_calc_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_calc_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_is_valid> {
	void read(TypeInput& in, ::mmx::contract::WebData_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_is_valid& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_is_valid& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_is_valid& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_is_valid& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_is_valid& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_is_valid_return> {
	void read(TypeInput& in, ::mmx::contract::WebData_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_is_valid_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_is_valid_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_is_valid_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_is_valid_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_is_valid_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_num_bytes> {
	void read(TypeInput& in, ::mmx::contract::WebData_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_num_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_num_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_num_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_num_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_num_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_num_bytes_return> {
	void read(TypeInput& in, ::mmx::contract::WebData_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_num_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_num_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_num_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_num_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_num_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_read_field> {
	void read(TypeInput& in, ::mmx::contract::WebData_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_read_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_read_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_read_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_read_field& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_read_field& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::WebData_read_field_return> {
	void read(TypeInput& in, ::mmx::contract::WebData_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::WebData_read_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::WebData_read_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::WebData_read_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::WebData_read_field_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::WebData_read_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::contract::method_t> {
	void read(TypeInput& in, ::mmx::contract::method_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::contract::method_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::contract::method_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::contract::method_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::contract::method_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::contract::method_t& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_contract_PACKAGE_HXX_


// AUTO GENERATED by vnxcppcodegen

#include <mmx/vm/varptr_t.hpp>

#include <mmx/vm/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::mmx::vm::varptr_t>::get_type_code() {
	return nullptr;
}

void type<::mmx::vm::varptr_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::vm::varptr_t());
}

void type<::mmx::vm::varptr_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::vm::varptr_t& value, bool special) {
	const std::vector<int> tmp = {12, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}


} // namespace vnx


namespace mmx {
namespace vm {


static void register_all_types() {
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;


} // namespace mmx
} // namespace vm


// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_exchange_PACKAGE_HXX_
#define INCLUDE_mmx_exchange_PACKAGE_HXX_

#include <vnx/Type.h>

#include <mmx/package.hxx>
#include <vnx/package.hxx>
#include <vnx/addons/package.hxx>


namespace mmx {
namespace exchange {


class RouterBase;
class ServerBase;
class Server_approve;
class Server_approve_return;
class Server_execute;
class Server_execute_return;
class Server_get_orders;
class Server_get_orders_return;
class Server_get_price;
class Server_get_price_return;
class Server_place;
class Server_place_return;
struct amount_t;
struct limit_order_t;
struct order_t;
struct order_type_e;
struct trade_order_t;
struct trade_pair_t;

extern const vnx::TypeCode* const vnx_native_type_code_RouterBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_approve; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_approve_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_execute; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_execute_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_orders; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_orders_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_price; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_price_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_place; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_place_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_amount_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_limit_order_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_order_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_order_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_trade_order_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_trade_pair_t; ///< \private

} // namespace mmx
} // namespace exchange


namespace vnx {

void read(TypeInput& in, ::mmx::exchange::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_approve& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_approve_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_execute_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_get_orders& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_get_orders_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_get_price& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_get_price_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_place& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::Server_place_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::amount_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::limit_order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::order_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::trade_order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::exchange::trade_pair_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::exchange::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_approve& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_approve_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_execute_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_get_orders& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_get_orders_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_get_price& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_get_price_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_place& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::Server_place_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::amount_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::limit_order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::order_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::trade_order_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::exchange::trade_pair_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::exchange::RouterBase& value); ///< \private
void read(std::istream& in, ::mmx::exchange::ServerBase& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_approve& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_approve_return& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_execute& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_execute_return& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_get_orders& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_get_orders_return& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_get_price& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_get_price_return& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_place& value); ///< \private
void read(std::istream& in, ::mmx::exchange::Server_place_return& value); ///< \private
void read(std::istream& in, ::mmx::exchange::amount_t& value); ///< \private
void read(std::istream& in, ::mmx::exchange::limit_order_t& value); ///< \private
void read(std::istream& in, ::mmx::exchange::order_t& value); ///< \private
void read(std::istream& in, ::mmx::exchange::order_type_e& value); ///< \private
void read(std::istream& in, ::mmx::exchange::trade_order_t& value); ///< \private
void read(std::istream& in, ::mmx::exchange::trade_pair_t& value); ///< \private

void write(std::ostream& out, const ::mmx::exchange::RouterBase& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::ServerBase& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_approve& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_approve_return& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_execute& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_execute_return& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_get_orders& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_get_orders_return& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_get_price& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_get_price_return& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_place& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::Server_place_return& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::amount_t& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::limit_order_t& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::order_t& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::order_type_e& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::trade_order_t& value); ///< \private
void write(std::ostream& out, const ::mmx::exchange::trade_pair_t& value); ///< \private

void accept(Visitor& visitor, const ::mmx::exchange::RouterBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::ServerBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_approve& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_approve_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_execute& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_execute_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_get_orders& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_get_orders_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_get_price& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_get_price_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_place& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::Server_place_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::amount_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::limit_order_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::order_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::order_type_e& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::trade_order_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::exchange::trade_pair_t& value); ///< \private

/// \private
template<>
struct type<::mmx::exchange::RouterBase> {
	void read(TypeInput& in, ::mmx::exchange::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::RouterBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::RouterBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::RouterBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::exchange::ServerBase> {
	void read(TypeInput& in, ::mmx::exchange::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::ServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::ServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::ServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::exchange::Server_approve> {
	void read(TypeInput& in, ::mmx::exchange::Server_approve& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_approve& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_approve& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_approve& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_approve& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_approve& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_approve_return> {
	void read(TypeInput& in, ::mmx::exchange::Server_approve_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_approve_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_approve_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_approve_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_approve_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_approve_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_execute> {
	void read(TypeInput& in, ::mmx::exchange::Server_execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_execute& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_execute& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_execute& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_execute& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_execute_return> {
	void read(TypeInput& in, ::mmx::exchange::Server_execute_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_execute_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_execute_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_execute_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_execute_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_execute_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_get_orders> {
	void read(TypeInput& in, ::mmx::exchange::Server_get_orders& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_get_orders& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_get_orders& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_get_orders& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_get_orders& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_get_orders& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_get_orders_return> {
	void read(TypeInput& in, ::mmx::exchange::Server_get_orders_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_get_orders_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_get_orders_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_get_orders_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_get_orders_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_get_orders_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_get_price> {
	void read(TypeInput& in, ::mmx::exchange::Server_get_price& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_get_price& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_get_price& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_get_price& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_get_price& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_get_price& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_get_price_return> {
	void read(TypeInput& in, ::mmx::exchange::Server_get_price_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_get_price_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_get_price_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_get_price_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_get_price_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_get_price_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_place> {
	void read(TypeInput& in, ::mmx::exchange::Server_place& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_place& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_place& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_place& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_place& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_place& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::Server_place_return> {
	void read(TypeInput& in, ::mmx::exchange::Server_place_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::Server_place_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::Server_place_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::Server_place_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::Server_place_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::Server_place_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::amount_t> {
	void read(TypeInput& in, ::mmx::exchange::amount_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::amount_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::amount_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::amount_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::amount_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::amount_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::limit_order_t> {
	void read(TypeInput& in, ::mmx::exchange::limit_order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::limit_order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::limit_order_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::limit_order_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::limit_order_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::limit_order_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::order_t> {
	void read(TypeInput& in, ::mmx::exchange::order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::order_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::order_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::order_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::order_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::order_type_e> {
	void read(TypeInput& in, ::mmx::exchange::order_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::order_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::order_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::order_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::order_type_e& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::order_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::trade_order_t> {
	void read(TypeInput& in, ::mmx::exchange::trade_order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::trade_order_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::trade_order_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::trade_order_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::trade_order_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::trade_order_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::exchange::trade_pair_t> {
	void read(TypeInput& in, ::mmx::exchange::trade_pair_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::exchange::trade_pair_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::exchange::trade_pair_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::exchange::trade_pair_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::exchange::trade_pair_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::exchange::trade_pair_t& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_exchange_PACKAGE_HXX_


// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_exchange_Client_CLIENT_HXX_
#define INCLUDE_mmx_exchange_Client_CLIENT_HXX_

#include <vnx/Client.h>
#include <mmx/Block.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/exchange/OrderBundle.hxx>
#include <mmx/exchange/open_order_t.hxx>
#include <mmx/exchange/trade_pair_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>


namespace mmx {
namespace exchange {

class ClientClient : public vnx::Client {
public:
	ClientClient(const std::string& service_name);
	
	ClientClient(vnx::Hash64 service_addr);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
	vnx::optional<::mmx::exchange::open_order_t> get_order(const ::mmx::txio_key_t& key = ::mmx::txio_key_t());
	
	std::shared_ptr<const ::mmx::exchange::OrderBundle> get_offer(const uint64_t& id = 0);
	
	std::vector<std::shared_ptr<const ::mmx::exchange::OrderBundle>> get_all_offers();
	
	std::shared_ptr<const ::mmx::exchange::OrderBundle> make_offer(const uint32_t& wallet = 0, const ::mmx::exchange::trade_pair_t& pair = ::mmx::exchange::trade_pair_t(), const uint64_t& bid = 0, const uint64_t& ask = 0);
	
	void place(std::shared_ptr<const ::mmx::exchange::OrderBundle> offer = nullptr);
	
	void place_async(std::shared_ptr<const ::mmx::exchange::OrderBundle> offer = nullptr);
	
	std::shared_ptr<const ::mmx::Transaction> approve(std::shared_ptr<const ::mmx::Transaction> tx = nullptr);
	
};


} // namespace mmx
} // namespace exchange

#endif // INCLUDE_mmx_exchange_Client_CLIENT_HXX_

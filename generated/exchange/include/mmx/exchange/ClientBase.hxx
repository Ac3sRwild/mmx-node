
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_exchange_ClientBase_HXX_
#define INCLUDE_mmx_exchange_ClientBase_HXX_

#include <mmx/exchange/package.hxx>
#include <mmx/Block.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/exchange/OrderBundle.hxx>
#include <mmx/exchange/open_order_t.hxx>
#include <mmx/exchange/trade_pair_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>


namespace mmx {
namespace exchange {

class ClientBase : public ::vnx::addons::MsgServer {
public:
	
	::vnx::TopicPtr input_blocks = "node.verified_blocks";
	std::string node_server = "Node";
	std::string wallet_server = "Wallet";
	
	typedef ::vnx::addons::MsgServer Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x7d13a60fec8eb7f6ull;
	
	ClientBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const ClientBase& _value);
	friend std::istream& operator>>(std::istream& _in, ClientBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	virtual vnx::optional<::mmx::exchange::open_order_t> get_order(const ::mmx::txio_key_t& key) const = 0;
	virtual std::shared_ptr<const ::mmx::exchange::OrderBundle> get_offer(const uint64_t& id) const = 0;
	virtual std::vector<std::shared_ptr<const ::mmx::exchange::OrderBundle>> get_all_offers() const = 0;
	virtual std::shared_ptr<const ::mmx::exchange::OrderBundle> make_offer(const uint32_t& wallet, const ::mmx::exchange::trade_pair_t& pair, const uint64_t& bid, const uint64_t& ask) const = 0;
	virtual void place(std::shared_ptr<const ::mmx::exchange::OrderBundle> offer) = 0;
	virtual std::shared_ptr<const ::mmx::Transaction> approve(std::shared_ptr<const ::mmx::Transaction> tx) const = 0;
	virtual void handle(std::shared_ptr<const ::mmx::Block> _value) {}
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace mmx
} // namespace exchange


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_exchange_ClientBase_HXX_

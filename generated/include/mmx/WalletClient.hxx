
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_Wallet_CLIENT_HXX_
#define INCLUDE_mmx_Wallet_CLIENT_HXX_

#include <vnx/Client.h>
#include <mmx/FarmerKeys.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <mmx/utxo_t.hxx>
#include <vnx/Module.h>


namespace mmx {

class WalletClient : public vnx::Client {
public:
	WalletClient(const std::string& service_name);
	
	WalletClient(vnx::Hash64 service_addr);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
	void open_wallet(const uint32_t& index = 0, const std::string& passwd = "");
	
	void open_wallet_async(const uint32_t& index = 0, const std::string& passwd = "");
	
	void open_wallet_ex(const uint32_t& index = 0, const uint32_t& num_addresses = 0, const std::string& passwd = "");
	
	void open_wallet_ex_async(const uint32_t& index = 0, const uint32_t& num_addresses = 0, const std::string& passwd = "");
	
	void close_wallet();
	
	void close_wallet_async();
	
	::mmx::hash_t send(const uint64_t& amount = 0, const ::mmx::addr_t& dst_addr = ::mmx::addr_t(), const ::mmx::addr_t& contract = ::mmx::addr_t());
	
	std::vector<std::pair<::mmx::txio_key_t, ::mmx::utxo_t>> get_utxo_list();
	
	std::vector<std::pair<::mmx::txio_key_t, ::mmx::utxo_t>> get_utxo_list_for(const ::mmx::addr_t& contract = ::mmx::addr_t());
	
	uint64_t get_balance(const ::mmx::addr_t& contract = ::mmx::addr_t());
	
	std::string get_address(const uint32_t& index = 0);
	
	::mmx::hash_t get_master_seed(const uint32_t& index = 0);
	
	void show_farmer_keys(const uint32_t& wallet = 0);
	
	void show_farmer_keys_async(const uint32_t& wallet = 0);
	
	std::shared_ptr<const ::mmx::FarmerKeys> get_farmer_keys(const uint32_t& wallet = 0);
	
	std::vector<std::shared_ptr<const ::mmx::FarmerKeys>> get_all_farmer_keys();
	
};


} // namespace mmx

#endif // INCLUDE_mmx_Wallet_CLIENT_HXX_

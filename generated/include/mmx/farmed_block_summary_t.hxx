
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_farmed_block_summary_t_HXX_
#define INCLUDE_mmx_farmed_block_summary_t_HXX_

#include <vnx/Type.h>
#include <mmx/package.hxx>
#include <mmx/addr_t.hpp>


namespace mmx {

struct MMX_EXPORT farmed_block_summary_t : vnx::struct_t {
	
	
	uint32_t num_blocks = 0;
	uint32_t last_height = 0;
	uint64_t total_rewards = 0;
	std::map<::mmx::addr_t, uint64_t> reward_map;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x9fe2bac01782721dull;
	
	farmed_block_summary_t() {}
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	static std::shared_ptr<farmed_block_summary_t> create();
	std::shared_ptr<farmed_block_summary_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const farmed_block_summary_t& _value);
	friend std::istream& operator>>(std::istream& _in, farmed_block_summary_t& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void farmed_block_summary_t::accept_generic(T& _visitor) const {
	_visitor.template type_begin<farmed_block_summary_t>(4);
	_visitor.type_field("num_blocks", 0); _visitor.accept(num_blocks);
	_visitor.type_field("last_height", 1); _visitor.accept(last_height);
	_visitor.type_field("total_rewards", 2); _visitor.accept(total_rewards);
	_visitor.type_field("reward_map", 3); _visitor.accept(reward_map);
	_visitor.template type_end<farmed_block_summary_t>(4);
}


} // namespace mmx


namespace vnx {

template<>
struct is_equivalent<::mmx::farmed_block_summary_t> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_mmx_farmed_block_summary_t_HXX_

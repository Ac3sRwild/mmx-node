
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_ProofOfTime_HXX_
#define INCLUDE_mmx_ProofOfTime_HXX_

#include <mmx/package.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/pubkey_t.hpp>
#include <mmx/signature_t.hpp>
#include <vnx/Value.h>


namespace mmx {

class MMX_EXPORT ProofOfTime : public ::vnx::Value {
public:
	
	uint32_t version = 0;
	::mmx::hash_t hash;
	uint32_t vdf_height = 0;
	uint64_t start = 0;
	uint64_t num_iters = 0;
	uint32_t segment_size = 0;
	::mmx::hash_t input;
	::mmx::hash_t prev;
	::mmx::addr_t reward_addr;
	std::vector<::mmx::hash_t> segments;
	::mmx::pubkey_t timelord_key;
	::mmx::signature_t timelord_sig;
	::mmx::hash_t content_hash;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xa84a63942b8e5c6aull;
	
	ProofOfTime() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual vnx::bool_t is_valid() const;
	virtual ::mmx::hash_t calc_hash() const;
	virtual ::mmx::hash_t calc_content_hash() const;
	virtual ::mmx::hash_t get_output() const;
	virtual uint64_t get_vdf_iters() const;
	virtual void validate() const;
	
	static std::shared_ptr<ProofOfTime> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const ProofOfTime& _value);
	friend std::istream& operator>>(std::istream& _in, ProofOfTime& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void ProofOfTime::accept_generic(T& _visitor) const {
	_visitor.template type_begin<ProofOfTime>(13);
	_visitor.type_field("version", 0); _visitor.accept(version);
	_visitor.type_field("hash", 1); _visitor.accept(hash);
	_visitor.type_field("vdf_height", 2); _visitor.accept(vdf_height);
	_visitor.type_field("start", 3); _visitor.accept(start);
	_visitor.type_field("num_iters", 4); _visitor.accept(num_iters);
	_visitor.type_field("segment_size", 5); _visitor.accept(segment_size);
	_visitor.type_field("input", 6); _visitor.accept(input);
	_visitor.type_field("prev", 7); _visitor.accept(prev);
	_visitor.type_field("reward_addr", 8); _visitor.accept(reward_addr);
	_visitor.type_field("segments", 9); _visitor.accept(segments);
	_visitor.type_field("timelord_key", 10); _visitor.accept(timelord_key);
	_visitor.type_field("timelord_sig", 11); _visitor.accept(timelord_sig);
	_visitor.type_field("content_hash", 12); _visitor.accept(content_hash);
	_visitor.template type_end<ProofOfTime>(13);
}


} // namespace mmx


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_ProofOfTime_HXX_

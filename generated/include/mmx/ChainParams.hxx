
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_ChainParams_HXX_
#define INCLUDE_mmx_ChainParams_HXX_

#include <mmx/package.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/uint_fraction_t.hxx>
#include <vnx/Value.h>


namespace mmx {

class MMX_EXPORT ChainParams : public ::vnx::Value {
public:
	
	uint32_t port = 0;
	int32_t decimals = 6;
	uint32_t min_ksize = 26;
	uint32_t max_ksize = 32;
	uint32_t plot_filter = 8;
	uint32_t commit_delay = 18;
	uint32_t infuse_delay = 6;
	uint32_t challenge_delay = 9;
	uint32_t challenge_interval = 48;
	uint32_t max_diff_adjust = 10;
	uint32_t max_vdf_count = 100;
	uint32_t proofs_per_height = 3;
	uint32_t max_validators = 11;
	uint64_t min_reward = 200000;
	uint64_t vdf_reward = 500000;
	uint32_t vdf_reward_interval = 50;
	uint32_t vdf_segment_size = 50000;
	uint32_t reward_adjust_div = 100;
	uint32_t reward_adjust_tick = 10000;
	uint32_t reward_adjust_interval = 8640;
	uint32_t target_mmx_gold_price = 2000;
	uint64_t time_diff_divider = 1000;
	uint64_t time_diff_constant = 1000000;
	uint64_t space_diff_constant = 100000000;
	uint64_t initial_time_diff = 50;
	uint64_t initial_space_diff = 10;
	uint64_t initial_time_stamp = 0;
	uint64_t min_txfee = 100;
	uint64_t min_txfee_io = 100;
	uint64_t min_txfee_sign = 1000;
	uint64_t min_txfee_memo = 50;
	uint64_t min_txfee_exec = 10000;
	uint64_t min_txfee_deploy = 100000;
	uint64_t min_txfee_byte = 10;
	uint64_t min_txfee_read = 1000;
	uint64_t min_txfee_read_kbyte = 1000;
	uint64_t max_block_size = 10000000;
	uint64_t max_block_cost = 100000000;
	uint64_t max_tx_cost = 1000000;
	std::vector<uint32_t> min_fee_ratio;
	int64_t block_interval_ms = 10000;
	std::string network;
	::mmx::addr_t nft_binary;
	::mmx::addr_t plot_binary;
	::mmx::addr_t swap_binary;
	::mmx::addr_t offer_binary;
	::mmx::addr_t token_binary;
	::mmx::addr_t plot_nft_binary;
	::mmx::addr_t escrow_binary;
	::mmx::addr_t time_lock_binary;
	::mmx::addr_t relay_binary;
	uint64_t fixed_project_reward = 50000;
	::mmx::uint_fraction_t project_ratio;
	uint32_t reward_activation = 50000;
	uint32_t transaction_activation = 100000;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x51bba8d28881e8e7ull;
	
	ChainParams() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual vnx::float64_t get_block_time() const;
	
	static std::shared_ptr<ChainParams> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const ChainParams& _value);
	friend std::istream& operator>>(std::istream& _in, ChainParams& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void ChainParams::accept_generic(T& _visitor) const {
	_visitor.template type_begin<ChainParams>(55);
	_visitor.type_field("port", 0); _visitor.accept(port);
	_visitor.type_field("decimals", 1); _visitor.accept(decimals);
	_visitor.type_field("min_ksize", 2); _visitor.accept(min_ksize);
	_visitor.type_field("max_ksize", 3); _visitor.accept(max_ksize);
	_visitor.type_field("plot_filter", 4); _visitor.accept(plot_filter);
	_visitor.type_field("commit_delay", 5); _visitor.accept(commit_delay);
	_visitor.type_field("infuse_delay", 6); _visitor.accept(infuse_delay);
	_visitor.type_field("challenge_delay", 7); _visitor.accept(challenge_delay);
	_visitor.type_field("challenge_interval", 8); _visitor.accept(challenge_interval);
	_visitor.type_field("max_diff_adjust", 9); _visitor.accept(max_diff_adjust);
	_visitor.type_field("max_vdf_count", 10); _visitor.accept(max_vdf_count);
	_visitor.type_field("proofs_per_height", 11); _visitor.accept(proofs_per_height);
	_visitor.type_field("max_validators", 12); _visitor.accept(max_validators);
	_visitor.type_field("min_reward", 13); _visitor.accept(min_reward);
	_visitor.type_field("vdf_reward", 14); _visitor.accept(vdf_reward);
	_visitor.type_field("vdf_reward_interval", 15); _visitor.accept(vdf_reward_interval);
	_visitor.type_field("vdf_segment_size", 16); _visitor.accept(vdf_segment_size);
	_visitor.type_field("reward_adjust_div", 17); _visitor.accept(reward_adjust_div);
	_visitor.type_field("reward_adjust_tick", 18); _visitor.accept(reward_adjust_tick);
	_visitor.type_field("reward_adjust_interval", 19); _visitor.accept(reward_adjust_interval);
	_visitor.type_field("target_mmx_gold_price", 20); _visitor.accept(target_mmx_gold_price);
	_visitor.type_field("time_diff_divider", 21); _visitor.accept(time_diff_divider);
	_visitor.type_field("time_diff_constant", 22); _visitor.accept(time_diff_constant);
	_visitor.type_field("space_diff_constant", 23); _visitor.accept(space_diff_constant);
	_visitor.type_field("initial_time_diff", 24); _visitor.accept(initial_time_diff);
	_visitor.type_field("initial_space_diff", 25); _visitor.accept(initial_space_diff);
	_visitor.type_field("initial_time_stamp", 26); _visitor.accept(initial_time_stamp);
	_visitor.type_field("min_txfee", 27); _visitor.accept(min_txfee);
	_visitor.type_field("min_txfee_io", 28); _visitor.accept(min_txfee_io);
	_visitor.type_field("min_txfee_sign", 29); _visitor.accept(min_txfee_sign);
	_visitor.type_field("min_txfee_memo", 30); _visitor.accept(min_txfee_memo);
	_visitor.type_field("min_txfee_exec", 31); _visitor.accept(min_txfee_exec);
	_visitor.type_field("min_txfee_deploy", 32); _visitor.accept(min_txfee_deploy);
	_visitor.type_field("min_txfee_byte", 33); _visitor.accept(min_txfee_byte);
	_visitor.type_field("min_txfee_read", 34); _visitor.accept(min_txfee_read);
	_visitor.type_field("min_txfee_read_kbyte", 35); _visitor.accept(min_txfee_read_kbyte);
	_visitor.type_field("max_block_size", 36); _visitor.accept(max_block_size);
	_visitor.type_field("max_block_cost", 37); _visitor.accept(max_block_cost);
	_visitor.type_field("max_tx_cost", 38); _visitor.accept(max_tx_cost);
	_visitor.type_field("min_fee_ratio", 39); _visitor.accept(min_fee_ratio);
	_visitor.type_field("block_interval_ms", 40); _visitor.accept(block_interval_ms);
	_visitor.type_field("network", 41); _visitor.accept(network);
	_visitor.type_field("nft_binary", 42); _visitor.accept(nft_binary);
	_visitor.type_field("plot_binary", 43); _visitor.accept(plot_binary);
	_visitor.type_field("swap_binary", 44); _visitor.accept(swap_binary);
	_visitor.type_field("offer_binary", 45); _visitor.accept(offer_binary);
	_visitor.type_field("token_binary", 46); _visitor.accept(token_binary);
	_visitor.type_field("plot_nft_binary", 47); _visitor.accept(plot_nft_binary);
	_visitor.type_field("escrow_binary", 48); _visitor.accept(escrow_binary);
	_visitor.type_field("time_lock_binary", 49); _visitor.accept(time_lock_binary);
	_visitor.type_field("relay_binary", 50); _visitor.accept(relay_binary);
	_visitor.type_field("fixed_project_reward", 51); _visitor.accept(fixed_project_reward);
	_visitor.type_field("project_ratio", 52); _visitor.accept(project_ratio);
	_visitor.type_field("reward_activation", 53); _visitor.accept(reward_activation);
	_visitor.type_field("transaction_activation", 54); _visitor.accept(transaction_activation);
	_visitor.template type_end<ChainParams>(55);
}


} // namespace mmx


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_ChainParams_HXX_


// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_trade_log_t_HXX_
#define INCLUDE_mmx_trade_log_t_HXX_

#include <vnx/Type.h>
#include <mmx/package.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/uint128.hpp>


namespace mmx {

struct MMX_EXPORT trade_log_t : vnx::struct_t {
	
	
	int64_t time_stamp = 0;
	::mmx::hash_t txid;
	::mmx::addr_t address;
	::mmx::uint128 inv_price;
	uint64_t ask_amount = 0;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xafedf6853c645eb8ull;
	
	trade_log_t() {}
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	uint64_t get_bid_amount() const;
	vnx::float64_t get_price() const;
	
	static std::shared_ptr<trade_log_t> create();
	std::shared_ptr<trade_log_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const trade_log_t& _value);
	friend std::istream& operator>>(std::istream& _in, trade_log_t& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void trade_log_t::accept_generic(T& _visitor) const {
	_visitor.template type_begin<trade_log_t>(5);
	_visitor.type_field("time_stamp", 0); _visitor.accept(time_stamp);
	_visitor.type_field("txid", 1); _visitor.accept(txid);
	_visitor.type_field("address", 2); _visitor.accept(address);
	_visitor.type_field("inv_price", 3); _visitor.accept(inv_price);
	_visitor.type_field("ask_amount", 4); _visitor.accept(ask_amount);
	_visitor.template type_end<trade_log_t>(5);
}


} // namespace mmx


namespace vnx {

template<>
struct is_equivalent<::mmx::trade_log_t> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_mmx_trade_log_t_HXX_


// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_operation_PACKAGE_HXX_
#define INCLUDE_mmx_operation_PACKAGE_HXX_

#include <vnx/Type.h>

#include <mmx/package.hxx>
#include <vnx/package.hxx>

#ifdef MMX_OPERATION_EXPORT_ENABLE
#include <mmx_operation_export.h>
#else
#ifndef MMX_OPERATION_EXPORT
#define MMX_OPERATION_EXPORT
#endif
#endif


namespace mmx {
namespace operation {

void register_all_types();


class Deposit;
class Execute;

MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Deposit; ///< \private
MMX_OPERATION_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Execute; ///< \private

} // namespace mmx
} // namespace operation


namespace vnx {

void read(TypeInput& in, ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::operation::Deposit& value); ///< \private
void read(std::istream& in, ::mmx::operation::Execute& value); ///< \private

void write(std::ostream& out, const ::mmx::operation::Deposit& value); ///< \private
void write(std::ostream& out, const ::mmx::operation::Execute& value); ///< \private

void accept(Visitor& visitor, const ::mmx::operation::Deposit& value); ///< \private
void accept(Visitor& visitor, const ::mmx::operation::Execute& value); ///< \private

/// \private
template<>
struct type<::mmx::operation::Deposit> {
	void read(TypeInput& in, ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Deposit& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Deposit& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Deposit& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Deposit& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Deposit& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::operation::Execute> {
	void read(TypeInput& in, ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::operation::Execute& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::operation::Execute& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::operation::Execute& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::operation::Execute& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::operation::Execute& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_operation_PACKAGE_HXX_

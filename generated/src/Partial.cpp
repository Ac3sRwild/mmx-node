
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/Partial.hxx>
#include <mmx/ProofOfSpace.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/signature_t.hpp>
#include <vnx/Value.h>

#include <vnx/vnx.h>


namespace mmx {


const vnx::Hash64 Partial::VNX_TYPE_HASH(0x2c849b13a7efd71aull);
const vnx::Hash64 Partial::VNX_CODE_HASH(0xf214d4b067315054ull);

vnx::Hash64 Partial::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string Partial::get_type_name() const {
	return "mmx.Partial";
}

const vnx::TypeCode* Partial::get_type_code() const {
	return mmx::vnx_native_type_code_Partial;
}

std::shared_ptr<Partial> Partial::create() {
	return std::make_shared<Partial>();
}

std::shared_ptr<vnx::Value> Partial::clone() const {
	return std::make_shared<Partial>(*this);
}

void Partial::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void Partial::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void Partial::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = mmx::vnx_native_type_code_Partial;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, height);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, hash);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, challenge);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, proof);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, contract);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, account);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, pool_url);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, harvester);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, partial_diff);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, lookup_time_ms);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, farmer_sig);
	_visitor.type_end(*_type_code);
}

void Partial::write(std::ostream& _out) const {
	_out << "{\"__type\": \"mmx.Partial\"";
	_out << ", \"height\": "; vnx::write(_out, height);
	_out << ", \"hash\": "; vnx::write(_out, hash);
	_out << ", \"challenge\": "; vnx::write(_out, challenge);
	_out << ", \"proof\": "; vnx::write(_out, proof);
	_out << ", \"contract\": "; vnx::write(_out, contract);
	_out << ", \"account\": "; vnx::write(_out, account);
	_out << ", \"pool_url\": "; vnx::write(_out, pool_url);
	_out << ", \"harvester\": "; vnx::write(_out, harvester);
	_out << ", \"partial_diff\": "; vnx::write(_out, partial_diff);
	_out << ", \"lookup_time_ms\": "; vnx::write(_out, lookup_time_ms);
	_out << ", \"farmer_sig\": "; vnx::write(_out, farmer_sig);
	_out << "}";
}

void Partial::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object Partial::to_object() const {
	vnx::Object _object;
	_object["__type"] = "mmx.Partial";
	_object["height"] = height;
	_object["hash"] = hash;
	_object["challenge"] = challenge;
	_object["proof"] = proof;
	_object["contract"] = contract;
	_object["account"] = account;
	_object["pool_url"] = pool_url;
	_object["harvester"] = harvester;
	_object["partial_diff"] = partial_diff;
	_object["lookup_time_ms"] = lookup_time_ms;
	_object["farmer_sig"] = farmer_sig;
	return _object;
}

void Partial::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "account") {
			_entry.second.to(account);
		} else if(_entry.first == "challenge") {
			_entry.second.to(challenge);
		} else if(_entry.first == "contract") {
			_entry.second.to(contract);
		} else if(_entry.first == "farmer_sig") {
			_entry.second.to(farmer_sig);
		} else if(_entry.first == "harvester") {
			_entry.second.to(harvester);
		} else if(_entry.first == "hash") {
			_entry.second.to(hash);
		} else if(_entry.first == "height") {
			_entry.second.to(height);
		} else if(_entry.first == "lookup_time_ms") {
			_entry.second.to(lookup_time_ms);
		} else if(_entry.first == "partial_diff") {
			_entry.second.to(partial_diff);
		} else if(_entry.first == "pool_url") {
			_entry.second.to(pool_url);
		} else if(_entry.first == "proof") {
			_entry.second.to(proof);
		}
	}
}

vnx::Variant Partial::get_field(const std::string& _name) const {
	if(_name == "height") {
		return vnx::Variant(height);
	}
	if(_name == "hash") {
		return vnx::Variant(hash);
	}
	if(_name == "challenge") {
		return vnx::Variant(challenge);
	}
	if(_name == "proof") {
		return vnx::Variant(proof);
	}
	if(_name == "contract") {
		return vnx::Variant(contract);
	}
	if(_name == "account") {
		return vnx::Variant(account);
	}
	if(_name == "pool_url") {
		return vnx::Variant(pool_url);
	}
	if(_name == "harvester") {
		return vnx::Variant(harvester);
	}
	if(_name == "partial_diff") {
		return vnx::Variant(partial_diff);
	}
	if(_name == "lookup_time_ms") {
		return vnx::Variant(lookup_time_ms);
	}
	if(_name == "farmer_sig") {
		return vnx::Variant(farmer_sig);
	}
	return vnx::Variant();
}

void Partial::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "height") {
		_value.to(height);
	} else if(_name == "hash") {
		_value.to(hash);
	} else if(_name == "challenge") {
		_value.to(challenge);
	} else if(_name == "proof") {
		_value.to(proof);
	} else if(_name == "contract") {
		_value.to(contract);
	} else if(_name == "account") {
		_value.to(account);
	} else if(_name == "pool_url") {
		_value.to(pool_url);
	} else if(_name == "harvester") {
		_value.to(harvester);
	} else if(_name == "partial_diff") {
		_value.to(partial_diff);
	} else if(_name == "lookup_time_ms") {
		_value.to(lookup_time_ms);
	} else if(_name == "farmer_sig") {
		_value.to(farmer_sig);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const Partial& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, Partial& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* Partial::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> Partial::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "mmx.Partial";
	type_code->type_hash = vnx::Hash64(0x2c849b13a7efd71aull);
	type_code->code_hash = vnx::Hash64(0xf214d4b067315054ull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::mmx::Partial);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<Partial>(); };
	type_code->fields.resize(11);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "height";
		field.code = {3};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "hash";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "challenge";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "proof";
		field.code = {16};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "contract";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "account";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "pool_url";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[7];
		field.is_extended = true;
		field.name = "harvester";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 8;
		field.name = "partial_diff";
		field.code = {4};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 4;
		field.name = "lookup_time_ms";
		field.code = {3};
	}
	{
		auto& field = type_code->fields[10];
		field.is_extended = true;
		field.name = "farmer_sig";
		field.code = {33, 11, 64, 1};
	}
	type_code->build();
	return type_code;
}

std::shared_ptr<vnx::Value> Partial::vnx_call_switch(std::shared_ptr<const vnx::Value> _method) {
	switch(_method->get_type_hash()) {
	}
	return nullptr;
}


} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::Partial& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.height, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.partial_diff, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.lookup_time_ms, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 1: vnx::read(in, value.hash, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.challenge, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.proof, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.contract, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.account, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.pool_url, type_code, _field->code.data()); break;
			case 7: vnx::read(in, value.harvester, type_code, _field->code.data()); break;
			case 10: vnx::read(in, value.farmer_sig, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::mmx::Partial& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = mmx::vnx_native_type_code_Partial;
		out.write_type_code(type_code);
		vnx::write_class_header<::mmx::Partial>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(16);
	vnx::write_value(_buf + 0, value.height);
	vnx::write_value(_buf + 4, value.partial_diff);
	vnx::write_value(_buf + 12, value.lookup_time_ms);
	vnx::write(out, value.hash, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.challenge, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.proof, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.contract, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.account, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.pool_url, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.harvester, type_code, type_code->fields[7].code.data());
	vnx::write(out, value.farmer_sig, type_code, type_code->fields[10].code.data());
}

void read(std::istream& in, ::mmx::Partial& value) {
	value.read(in);
}

void write(std::ostream& out, const ::mmx::Partial& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::mmx::Partial& value) {
	value.accept(visitor);
}

} // vnx


// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/NodeClient.hxx>
#include <mmx/Block.hxx>
#include <mmx/BlockHeader.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Contract.hxx>
#include <mmx/NetworkInfo.hxx>
#include <mmx/Node_add_block.hxx>
#include <mmx/Node_add_block_return.hxx>
#include <mmx/Node_add_transaction.hxx>
#include <mmx/Node_add_transaction_return.hxx>
#include <mmx/Node_call_contract.hxx>
#include <mmx/Node_call_contract_return.hxx>
#include <mmx/Node_dump_storage.hxx>
#include <mmx/Node_dump_storage_return.hxx>
#include <mmx/Node_fetch_offers.hxx>
#include <mmx/Node_fetch_offers_return.hxx>
#include <mmx/Node_get_all_balances.hxx>
#include <mmx/Node_get_all_balances_return.hxx>
#include <mmx/Node_get_balance.hxx>
#include <mmx/Node_get_balance_return.hxx>
#include <mmx/Node_get_balances.hxx>
#include <mmx/Node_get_balances_return.hxx>
#include <mmx/Node_get_block.hxx>
#include <mmx/Node_get_block_return.hxx>
#include <mmx/Node_get_block_at.hxx>
#include <mmx/Node_get_block_at_return.hxx>
#include <mmx/Node_get_block_hash.hxx>
#include <mmx/Node_get_block_hash_return.hxx>
#include <mmx/Node_get_block_hash_ex.hxx>
#include <mmx/Node_get_block_hash_ex_return.hxx>
#include <mmx/Node_get_contract.hxx>
#include <mmx/Node_get_contract_return.hxx>
#include <mmx/Node_get_contract_balances.hxx>
#include <mmx/Node_get_contract_balances_return.hxx>
#include <mmx/Node_get_contract_for.hxx>
#include <mmx/Node_get_contract_for_return.hxx>
#include <mmx/Node_get_contracts.hxx>
#include <mmx/Node_get_contracts_return.hxx>
#include <mmx/Node_get_contracts_by.hxx>
#include <mmx/Node_get_contracts_by_return.hxx>
#include <mmx/Node_get_contracts_owned_by.hxx>
#include <mmx/Node_get_contracts_owned_by_return.hxx>
#include <mmx/Node_get_exec_history.hxx>
#include <mmx/Node_get_exec_history_return.hxx>
#include <mmx/Node_get_farmed_block_summary.hxx>
#include <mmx/Node_get_farmed_block_summary_return.hxx>
#include <mmx/Node_get_farmed_blocks.hxx>
#include <mmx/Node_get_farmed_blocks_return.hxx>
#include <mmx/Node_get_farmer_ranking.hxx>
#include <mmx/Node_get_farmer_ranking_return.hxx>
#include <mmx/Node_get_genesis_hash.hxx>
#include <mmx/Node_get_genesis_hash_return.hxx>
#include <mmx/Node_get_header.hxx>
#include <mmx/Node_get_header_return.hxx>
#include <mmx/Node_get_header_at.hxx>
#include <mmx/Node_get_header_at_return.hxx>
#include <mmx/Node_get_height.hxx>
#include <mmx/Node_get_height_return.hxx>
#include <mmx/Node_get_history.hxx>
#include <mmx/Node_get_history_return.hxx>
#include <mmx/Node_get_history_memo.hxx>
#include <mmx/Node_get_history_memo_return.hxx>
#include <mmx/Node_get_network_info.hxx>
#include <mmx/Node_get_network_info_return.hxx>
#include <mmx/Node_get_offer.hxx>
#include <mmx/Node_get_offer_return.hxx>
#include <mmx/Node_get_offers.hxx>
#include <mmx/Node_get_offers_return.hxx>
#include <mmx/Node_get_offers_by.hxx>
#include <mmx/Node_get_offers_by_return.hxx>
#include <mmx/Node_get_params.hxx>
#include <mmx/Node_get_params_return.hxx>
#include <mmx/Node_get_plot_nft_info.hxx>
#include <mmx/Node_get_plot_nft_info_return.hxx>
#include <mmx/Node_get_plot_nft_target.hxx>
#include <mmx/Node_get_plot_nft_target_return.hxx>
#include <mmx/Node_get_recent_offers.hxx>
#include <mmx/Node_get_recent_offers_return.hxx>
#include <mmx/Node_get_recent_offers_for.hxx>
#include <mmx/Node_get_recent_offers_for_return.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity.hxx>
#include <mmx/Node_get_swap_equivalent_liquidity_return.hxx>
#include <mmx/Node_get_swap_fees_earned.hxx>
#include <mmx/Node_get_swap_fees_earned_return.hxx>
#include <mmx/Node_get_swap_history.hxx>
#include <mmx/Node_get_swap_history_return.hxx>
#include <mmx/Node_get_swap_info.hxx>
#include <mmx/Node_get_swap_info_return.hxx>
#include <mmx/Node_get_swap_liquidity_by.hxx>
#include <mmx/Node_get_swap_liquidity_by_return.hxx>
#include <mmx/Node_get_swap_trade_estimate.hxx>
#include <mmx/Node_get_swap_trade_estimate_return.hxx>
#include <mmx/Node_get_swap_user_info.hxx>
#include <mmx/Node_get_swap_user_info_return.hxx>
#include <mmx/Node_get_swaps.hxx>
#include <mmx/Node_get_swaps_return.hxx>
#include <mmx/Node_get_synced_height.hxx>
#include <mmx/Node_get_synced_height_return.hxx>
#include <mmx/Node_get_total_balance.hxx>
#include <mmx/Node_get_total_balance_return.hxx>
#include <mmx/Node_get_total_balances.hxx>
#include <mmx/Node_get_total_balances_return.hxx>
#include <mmx/Node_get_total_supply.hxx>
#include <mmx/Node_get_total_supply_return.hxx>
#include <mmx/Node_get_trade_history.hxx>
#include <mmx/Node_get_trade_history_return.hxx>
#include <mmx/Node_get_trade_history_for.hxx>
#include <mmx/Node_get_trade_history_for_return.hxx>
#include <mmx/Node_get_transaction.hxx>
#include <mmx/Node_get_transaction_return.hxx>
#include <mmx/Node_get_transactions.hxx>
#include <mmx/Node_get_transactions_return.hxx>
#include <mmx/Node_get_tx_height.hxx>
#include <mmx/Node_get_tx_height_return.hxx>
#include <mmx/Node_get_tx_ids.hxx>
#include <mmx/Node_get_tx_ids_return.hxx>
#include <mmx/Node_get_tx_ids_at.hxx>
#include <mmx/Node_get_tx_ids_at_return.hxx>
#include <mmx/Node_get_tx_ids_since.hxx>
#include <mmx/Node_get_tx_ids_since_return.hxx>
#include <mmx/Node_get_tx_info.hxx>
#include <mmx/Node_get_tx_info_return.hxx>
#include <mmx/Node_get_tx_info_for.hxx>
#include <mmx/Node_get_tx_info_for_return.hxx>
#include <mmx/Node_read_storage.hxx>
#include <mmx/Node_read_storage_return.hxx>
#include <mmx/Node_read_storage_array.hxx>
#include <mmx/Node_read_storage_array_return.hxx>
#include <mmx/Node_read_storage_entry_addr.hxx>
#include <mmx/Node_read_storage_entry_addr_return.hxx>
#include <mmx/Node_read_storage_entry_string.hxx>
#include <mmx/Node_read_storage_entry_string_return.hxx>
#include <mmx/Node_read_storage_entry_var.hxx>
#include <mmx/Node_read_storage_entry_var_return.hxx>
#include <mmx/Node_read_storage_field.hxx>
#include <mmx/Node_read_storage_field_return.hxx>
#include <mmx/Node_read_storage_map.hxx>
#include <mmx/Node_read_storage_map_return.hxx>
#include <mmx/Node_read_storage_object.hxx>
#include <mmx/Node_read_storage_object_return.hxx>
#include <mmx/Node_read_storage_var.hxx>
#include <mmx/Node_read_storage_var_return.hxx>
#include <mmx/Node_revert_sync.hxx>
#include <mmx/Node_revert_sync_return.hxx>
#include <mmx/Node_start_sync.hxx>
#include <mmx/Node_start_sync_return.hxx>
#include <mmx/Node_validate.hxx>
#include <mmx/Node_validate_return.hxx>
#include <mmx/Node_verify_partial.hxx>
#include <mmx/Node_verify_partial_return.hxx>
#include <mmx/Node_verify_plot_nft_target.hxx>
#include <mmx/Node_verify_plot_nft_target_return.hxx>
#include <mmx/Partial.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/VDF_Point.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/balance_t.hxx>
#include <mmx/exec_entry_t.hxx>
#include <mmx/exec_result_t.hxx>
#include <mmx/farmed_block_summary_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/offer_data_t.hxx>
#include <mmx/plot_nft_info_t.hxx>
#include <mmx/pooling_error_e.hxx>
#include <mmx/pubkey_t.hpp>
#include <mmx/query_filter_t.hxx>
#include <mmx/swap_entry_t.hxx>
#include <mmx/swap_info_t.hxx>
#include <mmx/swap_user_info_t.hxx>
#include <mmx/trade_entry_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_info_t.hxx>
#include <mmx/uint128.hpp>
#include <mmx/vm/varptr_t.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/Variant.hpp>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace mmx {

NodeClient::NodeClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

NodeClient::NodeClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

std::shared_ptr<const ::mmx::ChainParams> NodeClient::get_params() {
	auto _method = ::mmx::Node_get_params::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_params_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::ChainParams>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::NetworkInfo> NodeClient::get_network_info() {
	auto _method = ::mmx::Node_get_network_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_network_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::NetworkInfo>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::hash_t NodeClient::get_genesis_hash() {
	auto _method = ::mmx::Node_get_genesis_hash::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_genesis_hash_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::hash_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

uint32_t NodeClient::get_height() {
	auto _method = ::mmx::Node_get_height::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_height_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<uint32_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<uint32_t> NodeClient::get_synced_height() {
	auto _method = ::mmx::Node_get_synced_height::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_synced_height_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<uint32_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Block> NodeClient::get_block(const ::mmx::hash_t& hash) {
	auto _method = ::mmx::Node_get_block::create();
	_method->hash = hash;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Block>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Block> NodeClient::get_block_at(const uint32_t& height) {
	auto _method = ::mmx::Node_get_block_at::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_at_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Block>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::BlockHeader> NodeClient::get_header(const ::mmx::hash_t& hash) {
	auto _method = ::mmx::Node_get_header::create();
	_method->hash = hash;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_header_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::BlockHeader>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::BlockHeader> NodeClient::get_header_at(const uint32_t& height) {
	auto _method = ::mmx::Node_get_header_at::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_header_at_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::BlockHeader>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<::mmx::hash_t> NodeClient::get_block_hash(const uint32_t& height) {
	auto _method = ::mmx::Node_get_block_hash::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_hash_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<::mmx::hash_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<std::pair<::mmx::hash_t, ::mmx::hash_t>> NodeClient::get_block_hash_ex(const uint32_t& height) {
	auto _method = ::mmx::Node_get_block_hash_ex::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_block_hash_ex_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<std::pair<::mmx::hash_t, ::mmx::hash_t>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<uint32_t> NodeClient::get_tx_height(const ::mmx::hash_t& id) {
	auto _method = ::mmx::Node_get_tx_height::create();
	_method->id = id;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_height_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<uint32_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<::mmx::tx_info_t> NodeClient::get_tx_info(const ::mmx::hash_t& id) {
	auto _method = ::mmx::Node_get_tx_info::create();
	_method->id = id;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<::mmx::tx_info_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<::mmx::tx_info_t> NodeClient::get_tx_info_for(std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::Node_get_tx_info_for::create();
	_method->tx = tx;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_info_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<::mmx::tx_info_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::hash_t> NodeClient::get_tx_ids(const uint32_t& limit) {
	auto _method = ::mmx::Node_get_tx_ids::create();
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_ids_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::hash_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::hash_t> NodeClient::get_tx_ids_at(const uint32_t& height) {
	auto _method = ::mmx::Node_get_tx_ids_at::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_ids_at_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::hash_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::hash_t> NodeClient::get_tx_ids_since(const uint32_t& height) {
	auto _method = ::mmx::Node_get_tx_ids_since::create();
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_tx_ids_since_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::hash_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::exec_result_t NodeClient::validate(std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::Node_validate::create();
	_method->tx = tx;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_validate_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::exec_result_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

void NodeClient::add_block(std::shared_ptr<const ::mmx::Block> block) {
	auto _method = ::mmx::Node_add_block::create();
	_method->block = block;
	vnx_request(_method, false);
}

void NodeClient::add_block_async(std::shared_ptr<const ::mmx::Block> block) {
	auto _method = ::mmx::Node_add_block::create();
	_method->block = block;
	vnx_request(_method, true);
}

void NodeClient::add_transaction(std::shared_ptr<const ::mmx::Transaction> tx, const vnx::bool_t& pre_validate) {
	auto _method = ::mmx::Node_add_transaction::create();
	_method->tx = tx;
	_method->pre_validate = pre_validate;
	vnx_request(_method, false);
}

void NodeClient::add_transaction_async(std::shared_ptr<const ::mmx::Transaction> tx, const vnx::bool_t& pre_validate) {
	auto _method = ::mmx::Node_add_transaction::create();
	_method->tx = tx;
	_method->pre_validate = pre_validate;
	vnx_request(_method, true);
}

std::shared_ptr<const ::mmx::Contract> NodeClient::get_contract(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Node_get_contract::create();
	_method->address = address;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Contract>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Contract> NodeClient::get_contract_for(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Node_get_contract_for::create();
	_method->address = address;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Contract>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<std::shared_ptr<const ::mmx::Contract>> NodeClient::get_contracts(const std::vector<::mmx::addr_t>& addresses) {
	auto _method = ::mmx::Node_get_contracts::create();
	_method->addresses = addresses;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contracts_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::Contract>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::addr_t> NodeClient::get_contracts_by(const std::vector<::mmx::addr_t>& addresses, const vnx::optional<::mmx::hash_t>& type_hash) {
	auto _method = ::mmx::Node_get_contracts_by::create();
	_method->addresses = addresses;
	_method->type_hash = type_hash;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contracts_by_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::addr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::addr_t> NodeClient::get_contracts_owned_by(const std::vector<::mmx::addr_t>& addresses, const vnx::optional<::mmx::hash_t>& type_hash) {
	auto _method = ::mmx::Node_get_contracts_owned_by::create();
	_method->addresses = addresses;
	_method->type_hash = type_hash;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contracts_owned_by_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::addr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::Transaction> NodeClient::get_transaction(const ::mmx::hash_t& id, const vnx::bool_t& pending) {
	auto _method = ::mmx::Node_get_transaction::create();
	_method->id = id;
	_method->pending = pending;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_transaction_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<std::shared_ptr<const ::mmx::Transaction>> NodeClient::get_transactions(const std::vector<::mmx::hash_t>& ids) {
	auto _method = ::mmx::Node_get_transactions::create();
	_method->ids = ids;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_transactions_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::Transaction>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::tx_entry_t> NodeClient::get_history(const std::vector<::mmx::addr_t>& addresses, const ::mmx::query_filter_t& filter) {
	auto _method = ::mmx::Node_get_history::create();
	_method->addresses = addresses;
	_method->filter = filter;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::tx_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::tx_entry_t> NodeClient::get_history_memo(const std::vector<::mmx::addr_t>& addresses, const std::string& memo, const ::mmx::query_filter_t& filter) {
	auto _method = ::mmx::Node_get_history_memo::create();
	_method->addresses = addresses;
	_method->memo = memo;
	_method->filter = filter;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_history_memo_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::tx_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::uint128 NodeClient::get_balance(const ::mmx::addr_t& address, const ::mmx::addr_t& currency) {
	auto _method = ::mmx::Node_get_balance::create();
	_method->address = address;
	_method->currency = currency;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_balance_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::uint128>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::uint128> NodeClient::get_balances(const ::mmx::addr_t& address, const std::set<::mmx::addr_t>& whitelist, const int32_t& limit) {
	auto _method = ::mmx::Node_get_balances::create();
	_method->address = address;
	_method->whitelist = whitelist;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::uint128>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::balance_t> NodeClient::get_contract_balances(const ::mmx::addr_t& address, const std::set<::mmx::addr_t>& whitelist, const int32_t& limit) {
	auto _method = ::mmx::Node_get_contract_balances::create();
	_method->address = address;
	_method->whitelist = whitelist;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_contract_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::balance_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::uint128 NodeClient::get_total_balance(const std::vector<::mmx::addr_t>& addresses, const ::mmx::addr_t& currency) {
	auto _method = ::mmx::Node_get_total_balance::create();
	_method->addresses = addresses;
	_method->currency = currency;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_balance_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::uint128>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<::mmx::addr_t, ::mmx::uint128> NodeClient::get_total_balances(const std::vector<::mmx::addr_t>& addresses, const std::set<::mmx::addr_t>& whitelist, const int32_t& limit) {
	auto _method = ::mmx::Node_get_total_balances::create();
	_method->addresses = addresses;
	_method->whitelist = whitelist;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, ::mmx::uint128>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128> NodeClient::get_all_balances(const std::vector<::mmx::addr_t>& addresses, const std::set<::mmx::addr_t>& whitelist, const int32_t& limit) {
	auto _method = ::mmx::Node_get_all_balances::create();
	_method->addresses = addresses;
	_method->whitelist = whitelist;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_all_balances_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<std::pair<::mmx::addr_t, ::mmx::addr_t>, ::mmx::uint128>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::exec_entry_t> NodeClient::get_exec_history(const ::mmx::addr_t& address, const int32_t& limit, const vnx::bool_t& recent) {
	auto _method = ::mmx::Node_get_exec_history::create();
	_method->address = address;
	_method->limit = limit;
	_method->recent = recent;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_exec_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::exec_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<std::string, ::mmx::vm::varptr_t> NodeClient::read_storage(const ::mmx::addr_t& contract, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage::create();
	_method->contract = contract;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<std::string, ::mmx::vm::varptr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<uint64_t, ::mmx::vm::varptr_t> NodeClient::dump_storage(const ::mmx::addr_t& contract, const uint32_t& height) {
	auto _method = ::mmx::Node_dump_storage::create();
	_method->contract = contract;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_dump_storage_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<uint64_t, ::mmx::vm::varptr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::vm::varptr_t NodeClient::read_storage_var(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_var::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_var_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::vm::varptr_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::vm::varptr_t NodeClient::read_storage_entry_var(const ::mmx::addr_t& contract, const uint64_t& address, const uint64_t& key, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_entry_var::create();
	_method->contract = contract;
	_method->address = address;
	_method->key = key;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_entry_var_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::vm::varptr_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::pair<::mmx::vm::varptr_t, uint64_t> NodeClient::read_storage_field(const ::mmx::addr_t& contract, const std::string& name, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_field::create();
	_method->contract = contract;
	_method->name = name;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_field_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::pair<::mmx::vm::varptr_t, uint64_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::tuple<::mmx::vm::varptr_t, uint64_t, uint64_t> NodeClient::read_storage_entry_addr(const ::mmx::addr_t& contract, const std::string& name, const ::mmx::addr_t& key, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_entry_addr::create();
	_method->contract = contract;
	_method->name = name;
	_method->key = key;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_entry_addr_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::tuple<::mmx::vm::varptr_t, uint64_t, uint64_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::tuple<::mmx::vm::varptr_t, uint64_t, uint64_t> NodeClient::read_storage_entry_string(const ::mmx::addr_t& contract, const std::string& name, const std::string& key, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_entry_string::create();
	_method->contract = contract;
	_method->name = name;
	_method->key = key;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_entry_string_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::tuple<::mmx::vm::varptr_t, uint64_t, uint64_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::vm::varptr_t> NodeClient::read_storage_array(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_array::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_array_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::vm::varptr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<::mmx::vm::varptr_t, ::mmx::vm::varptr_t> NodeClient::read_storage_map(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_map::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_map_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::vm::varptr_t, ::mmx::vm::varptr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<std::string, ::mmx::vm::varptr_t> NodeClient::read_storage_object(const ::mmx::addr_t& contract, const uint64_t& address, const uint32_t& height) {
	auto _method = ::mmx::Node_read_storage_object::create();
	_method->contract = contract;
	_method->address = address;
	_method->height = height;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_read_storage_object_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<std::string, ::mmx::vm::varptr_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::vnx::Variant NodeClient::call_contract(const ::mmx::addr_t& address, const std::string& method, const std::vector<::vnx::Variant>& args, const vnx::optional<::mmx::addr_t>& user, const vnx::optional<std::pair<::mmx::addr_t, ::mmx::uint128>>& deposit) {
	auto _method = ::mmx::Node_call_contract::create();
	_method->address = address;
	_method->method = method;
	_method->args = args;
	_method->user = user;
	_method->deposit = deposit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_call_contract_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

vnx::optional<::mmx::plot_nft_info_t> NodeClient::get_plot_nft_info(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Node_get_plot_nft_info::create();
	_method->address = address;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_plot_nft_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<::mmx::plot_nft_info_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::addr_t NodeClient::get_plot_nft_target(const ::mmx::addr_t& address, const vnx::optional<::mmx::addr_t>& farmer_addr) {
	auto _method = ::mmx::Node_get_plot_nft_target::create();
	_method->address = address;
	_method->farmer_addr = farmer_addr;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_plot_nft_target_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::addr_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::offer_data_t NodeClient::get_offer(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Node_get_offer::create();
	_method->address = address;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::offer_data_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::offer_data_t> NodeClient::get_offers(const uint32_t& since, const vnx::bool_t& state) {
	auto _method = ::mmx::Node_get_offers::create();
	_method->since = since;
	_method->state = state;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offers_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::offer_data_t> NodeClient::get_offers_by(const std::vector<::mmx::addr_t>& owners, const vnx::bool_t& state) {
	auto _method = ::mmx::Node_get_offers_by::create();
	_method->owners = owners;
	_method->state = state;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_offers_by_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::offer_data_t> NodeClient::fetch_offers(const std::vector<::mmx::addr_t>& addresses, const vnx::bool_t& state, const vnx::bool_t& closed) {
	auto _method = ::mmx::Node_fetch_offers::create();
	_method->addresses = addresses;
	_method->state = state;
	_method->closed = closed;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_fetch_offers_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::offer_data_t> NodeClient::get_recent_offers(const int32_t& limit, const vnx::bool_t& state) {
	auto _method = ::mmx::Node_get_recent_offers::create();
	_method->limit = limit;
	_method->state = state;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_recent_offers_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::offer_data_t> NodeClient::get_recent_offers_for(const vnx::optional<::mmx::addr_t>& bid, const vnx::optional<::mmx::addr_t>& ask, const ::mmx::uint128& min_bid, const int32_t& limit, const vnx::bool_t& state) {
	auto _method = ::mmx::Node_get_recent_offers_for::create();
	_method->bid = bid;
	_method->ask = ask;
	_method->min_bid = min_bid;
	_method->limit = limit;
	_method->state = state;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_recent_offers_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::offer_data_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::trade_entry_t> NodeClient::get_trade_history(const int32_t& limit, const uint32_t& since) {
	auto _method = ::mmx::Node_get_trade_history::create();
	_method->limit = limit;
	_method->since = since;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_trade_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::trade_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::trade_entry_t> NodeClient::get_trade_history_for(const vnx::optional<::mmx::addr_t>& bid, const vnx::optional<::mmx::addr_t>& ask, const int32_t& limit, const uint32_t& since) {
	auto _method = ::mmx::Node_get_trade_history_for::create();
	_method->bid = bid;
	_method->ask = ask;
	_method->limit = limit;
	_method->since = since;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_trade_history_for_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::trade_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::swap_info_t> NodeClient::get_swaps(const uint32_t& since, const vnx::optional<::mmx::addr_t>& token, const vnx::optional<::mmx::addr_t>& currency, const int32_t& limit) {
	auto _method = ::mmx::Node_get_swaps::create();
	_method->since = since;
	_method->token = token;
	_method->currency = currency;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swaps_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::swap_info_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::swap_info_t NodeClient::get_swap_info(const ::mmx::addr_t& address) {
	auto _method = ::mmx::Node_get_swap_info::create();
	_method->address = address;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::swap_info_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::swap_user_info_t NodeClient::get_swap_user_info(const ::mmx::addr_t& address, const ::mmx::addr_t& user) {
	auto _method = ::mmx::Node_get_swap_user_info::create();
	_method->address = address;
	_method->user = user;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_user_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::swap_user_info_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<::mmx::swap_entry_t> NodeClient::get_swap_history(const ::mmx::addr_t& address, const int32_t& limit) {
	auto _method = ::mmx::Node_get_swap_history::create();
	_method->address = address;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_history_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::swap_entry_t>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::array<::mmx::uint128, 2> NodeClient::get_swap_trade_estimate(const ::mmx::addr_t& address, const uint32_t& i, const ::mmx::uint128& amount, const int32_t& num_iter) {
	auto _method = ::mmx::Node_get_swap_trade_estimate::create();
	_method->address = address;
	_method->i = i;
	_method->amount = amount;
	_method->num_iter = num_iter;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_trade_estimate_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::array<::mmx::uint128, 2>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::array<::mmx::uint128, 2> NodeClient::get_swap_fees_earned(const ::mmx::addr_t& address, const ::mmx::addr_t& user) {
	auto _method = ::mmx::Node_get_swap_fees_earned::create();
	_method->address = address;
	_method->user = user;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_fees_earned_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::array<::mmx::uint128, 2>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::array<::mmx::uint128, 2> NodeClient::get_swap_equivalent_liquidity(const ::mmx::addr_t& address, const ::mmx::addr_t& user) {
	auto _method = ::mmx::Node_get_swap_equivalent_liquidity::create();
	_method->address = address;
	_method->user = user;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_equivalent_liquidity_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::array<::mmx::uint128, 2>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::map<::mmx::addr_t, std::array<std::pair<::mmx::addr_t, ::mmx::uint128>, 2>> NodeClient::get_swap_liquidity_by(const std::vector<::mmx::addr_t>& addresses) {
	auto _method = ::mmx::Node_get_swap_liquidity_by::create();
	_method->addresses = addresses;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_swap_liquidity_by_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::map<::mmx::addr_t, std::array<std::pair<::mmx::addr_t, ::mmx::uint128>, 2>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::uint128 NodeClient::get_total_supply(const ::mmx::addr_t& currency) {
	auto _method = ::mmx::Node_get_total_supply::create();
	_method->currency = currency;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_total_supply_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::uint128>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<std::shared_ptr<const ::mmx::BlockHeader>> NodeClient::get_farmed_blocks(const std::vector<::mmx::pubkey_t>& farmer_keys, const vnx::bool_t& full_blocks, const uint32_t& since, const int32_t& limit) {
	auto _method = ::mmx::Node_get_farmed_blocks::create();
	_method->farmer_keys = farmer_keys;
	_method->full_blocks = full_blocks;
	_method->since = since;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_farmed_blocks_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::BlockHeader>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::mmx::farmed_block_summary_t NodeClient::get_farmed_block_summary(const std::vector<::mmx::pubkey_t>& farmer_keys, const uint32_t& since) {
	auto _method = ::mmx::Node_get_farmed_block_summary::create();
	_method->farmer_keys = farmer_keys;
	_method->since = since;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_farmed_block_summary_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::farmed_block_summary_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::vector<std::pair<::mmx::pubkey_t, uint32_t>> NodeClient::get_farmer_ranking(const int32_t& limit) {
	auto _method = ::mmx::Node_get_farmer_ranking::create();
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_get_farmer_ranking_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<::mmx::pubkey_t, uint32_t>>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::tuple<::mmx::pooling_error_e, std::string> NodeClient::verify_plot_nft_target(const ::mmx::addr_t& address, const ::mmx::addr_t& pool_target) {
	auto _method = ::mmx::Node_verify_plot_nft_target::create();
	_method->address = address;
	_method->pool_target = pool_target;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_verify_plot_nft_target_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::tuple<::mmx::pooling_error_e, std::string>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::tuple<::mmx::pooling_error_e, std::string> NodeClient::verify_partial(std::shared_ptr<const ::mmx::Partial> partial, const vnx::optional<::mmx::addr_t>& pool_target) {
	auto _method = ::mmx::Node_verify_partial::create();
	_method->partial = partial;
	_method->pool_target = pool_target;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::Node_verify_partial_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::tuple<::mmx::pooling_error_e, std::string>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

void NodeClient::start_sync(const vnx::bool_t& force) {
	auto _method = ::mmx::Node_start_sync::create();
	_method->force = force;
	vnx_request(_method, false);
}

void NodeClient::start_sync_async(const vnx::bool_t& force) {
	auto _method = ::mmx::Node_start_sync::create();
	_method->force = force;
	vnx_request(_method, true);
}

void NodeClient::revert_sync(const uint32_t& height) {
	auto _method = ::mmx::Node_revert_sync::create();
	_method->height = height;
	vnx_request(_method, false);
}

void NodeClient::revert_sync_async(const uint32_t& height) {
	auto _method = ::mmx::Node_revert_sync::create();
	_method->height = height;
	vnx_request(_method, true);
}

std::shared_ptr<const ::vnx::addons::HttpResponse> NodeClient::http_request(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path) {
	auto _method = ::vnx::addons::HttpComponent_http_request::create();
	_method->request = request;
	_method->sub_path = sub_path;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpResponse>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::addons::HttpData> NodeClient::http_request_chunk(std::shared_ptr<const ::vnx::addons::HttpRequest> request, const std::string& sub_path, const int64_t& offset, const int64_t& max_bytes) {
	auto _method = ::vnx::addons::HttpComponent_http_request_chunk::create();
	_method->request = request;
	_method->sub_path = sub_path;
	_method->offset = offset;
	_method->max_bytes = max_bytes;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::addons::HttpData>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::vnx::Object NodeClient::vnx_get_config_object() {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

::vnx::Variant NodeClient::vnx_get_config(const std::string& name) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

void NodeClient::vnx_set_config_object(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, false);
}

void NodeClient::vnx_set_config_object_async(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, true);
}

void NodeClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, false);
}

void NodeClient::vnx_set_config_async(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, true);
}

::vnx::TypeCode NodeClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::TypeCode>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::ModuleInfo> NodeClient::vnx_get_module_info() {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}

void NodeClient::vnx_restart() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, false);
}

void NodeClient::vnx_restart_async() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, true);
}

void NodeClient::vnx_stop() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, false);
}

void NodeClient::vnx_stop_async() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, true);
}

vnx::bool_t NodeClient::vnx_self_test() {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::bool_t>();
	} else {
		throw std::logic_error("NodeClient: invalid return value");
	}
}


} // namespace mmx

package mmx;

class BlockHeader {
	
	uint version;
	
	hash_t hash;
	hash_t prev;
	
	uint height;
	
	// TODO: uint time_hour;				// hours since chain start
	// TODO: uint time_counter;			// blocks since last hour increment
	
	ulong nonce;
	
	ulong time_diff;
	ulong space_diff;
	
	uint128 weight;
	uint128 total_weight;
	
	uint netspace_ratio;
	uint average_txfee;
	
	ulong vdf_iters;
	hash_t vdf_output[2];
	optional<addr_t> vdf_reward_addr;
	
	ProofOfSpace* proof;
	
	vector<hash_proof_t> hash_proof;
	
	ulong reward_amount;
	optional<addr_t> reward_addr;
	
	uint static_cost;
	uint total_cost;
	
	uint tx_count;
	ulong tx_fees;
	
	hash_t tx_hash;
	
	optional<signature_t> farmer_sig;
	
	hash_t content_hash;
	
	
	bool is_valid() const;
	
	pair<hash_t, hash_t> calc_hash() const;
	
	void validate() const;
	
	BlockHeader* get_header() const;
	
	block_index_t get_block_index(long file_offset) const;
	
}

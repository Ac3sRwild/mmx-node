package mmx;

module Farmer {
	
	vnx.TopicPtr input_info = "harvester.info";
	vnx.TopicPtr input_proofs = "harvester.proof";
	vnx.TopicPtr input_partials = "harvester.partials";
	
	vnx.TopicPtr output_proofs = "farmer.proof";
	vnx.TopicPtr output_partials = "farmer.partials";
	
	uint harvester_timeout = 60;					// [sec]
	uint difficulty_interval = 300;					// [sec]
	
	string node_server = "Node";
	string wallet_server = "Wallet";
	
	optional<addr_t> reward_addr;					// default = first address of first wallet
	
	optional<ulong> partial_diff;					// custom partial diff (if pool supports it)
	optional<ulong> payout_threshold;				// custom payout threshold (if pool supports it)
	
	
	@Permission(permission_e.REMOTE)
	vnx.Hash64 get_mac_addr() const;
	
	@Permission(permission_e.REMOTE)
	ulong get_partial_diff(addr_t plot_nft) const;
	
	@Permission(permission_e.REMOTE)
	map<addr_t, ulong> get_partial_diffs(vector<addr_t> plot_nfts) const;
	
	@Permission(permission_e.REMOTE)
	vector<pubkey_t> get_farmer_keys() const;
	
	FarmInfo* get_farm_info() const;
	
	@Permission(permission_e.SIGN_MSG)
	BlockHeader* sign_block(BlockHeader* block) const;
	
	@Permission(permission_e.SIGN_MSG)
	signature_t sign_vote(ValidatorVote* vote) const;
	
	
	void handle(FarmInfo sample);
	void handle(ProofResponse sample);
	void handle(Partial sample);
	
}

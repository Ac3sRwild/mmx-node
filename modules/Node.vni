package mmx;

module Node {
	
	vnx.TopicPtr input_blocks = "network.blocks";
	vnx.TopicPtr input_transactions = "network.transactions";
	vnx.TopicPtr input_proof_of_time = "timelord.proofs";
	vnx.TopicPtr input_proof_of_space = "harvester.proofs";
	
	vnx.TopicPtr output_verified_vdfs = "node.verified_vdfs";
	vnx.TopicPtr output_verified_blocks = "node.verified_blocks";
	vnx.TopicPtr output_committed_blocks = "node.committed_blocks";
	vnx.TopicPtr output_interval_request = "timelord.requests";
	vnx.TopicPtr output_timelord_infuse = "timelord.infuse";
	vnx.TopicPtr output_challenges = "harvester.challenges";
	
	int update_interval_ms = 1000;			// [ms]
	
	uint max_history = 1000;
	
	string storage_path;
	
	
	uint get_height() const;
	
	Block* get_block(hash_t hash) const;
	
	Block* get_block_at(uint height) const;
	
	hash_t get_block_hash(uint height) const;
	
	Transaction* get_transaction(hash_t id) const;
	
	void add_block(Block* block);
	
	void add_transaction(Transaction* tx);
	
	ulong get_balance(addr_t address, addr_t contract) const;
	
	ulong get_total_balance(vector<addr_t> addresses, addr_t contract) const;
	
	vector<pair<utxo_key_t, utxo_t>> get_utxo_list(vector<addr_t> addresses) const;
	
	
	void handle(Block value);
	void handle(Transaction value);
	void handle(ProofOfTime value);
	void handle(ProofResponse value);
	
}
